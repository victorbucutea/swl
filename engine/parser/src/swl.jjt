/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  MULTI=true;
  KEEP_LINE_COLUMN = false;
  static = false;
  DEBUG_PARSER=true;
  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(SWL)
package ro.sft.recruiter;

public class SWL
{

  private int nestingLvl = 0;

  
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    SWL parser = new SWL(System.in);
    try
    {
      ASTSwdlFile n = parser.SwdlFile();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(SWL)

<*> SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}
<*> TOKEN :
{
  <OPEN_BRACKET: "{" >
| <CLOSE_BRACKET: "}" >
| < OPEN_R_BRACKET: "(" >
| < CLOSE_R_BRACKET: ")" >
| < OPEN_S_BRACKET: "[" >
| < CLOSE_S_BRACKET: "]" >}

<DEFAULT> TOKEN :
{
  <#ALPHA_CHAR: [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff"
      ] >
| <#NUM_CHAR:   [
       "\u0030"-"\u0039"
      ] >
| <#ALPHANUM_CHAR: ( <ALPHA_CHAR> | <NUM_CHAR> ) >
| <#IDENTIFIER_CHAR: ( <ALPHANUM_CHAR> | [ "_", "-" ] ) >
| <#QUOTE:      ( "'" | "\"" )>
| <APP_NAME : "name">
| <MODULE: "module"  > 
| < DOMAIN: "domain" >
| < LOGIC: "logic" >
| < SCREEN : "screen"> 
| < SERVICE :"service" >
| < UI : "ui" > 
| < CONTROLLER: "controller" >
| < MODEL: "model" > 
| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| <QUOTED_IDENTIFIER: < QUOTE > <IDENTIFIER > < QUOTE >>
| <QUOTED_TEXT: < QUOTE > (~["\"","'"])* < QUOTE >>
// Model components
| < INPUT: "input" >
| < INPUT_AREA: "input_area" >
| < INPUT_FILE: "input_file" >
| < CHECKBOX: "checkbox" >
| < SELECTBOX: "selectbox" >
| < SELECTOPTION: "selectoption" >
| < SELECTOPTIONGROUP: "selectoptiongroup" >
| < LABEL: "label" >
| < RADIO: "radio" >
| < RADIOS: "radios" >
| < BUTTON: "button" >
| < IMG: "img" >

// Layout Components

| < VERTICAL_LAYOUT: "vertical_layout" >
| < HORIZONTAL_LAYOUT: "horizontal_layout" >
| < HORIZONTAL_FORM: "horizontal_form" >
| < HORIZONTAL_FORM_GROUP: "horizontal_form_group" >
| < SECTION: "section" >


// HTML components
| < BR: "br" >
| < H1: "h1" >
| < H2: "h2" >
| < H3: "h3" >
| < H4: "h4" >
| < H5: "h5" >
| < H6: "h6" >
| < NAME: < IDENTIFIER >> 
}

< JsContentState > TOKEN:
{
  < ANY_NON_OPEN_CLOSE: (~["{","}"])+ >
}

< InputDescriptionState > TOKEN:
{
  < NUMBER : < NUM_CHAR > (< NUM_CHAR >)? >
| < VARIABLE : < IDENTIFIER >>
| < COMMA : "," >
| < DOT: "." >
| < LITERAL: ("\"" (~["\"",";"])* "\"") | ("'" (~["'",";"])* "'") >
| < DESC_QUOTE :< QUOTE >>
}

< CssStyleState > TOKEN :
{
  < STYLE_CLASS : < IDENTIFIER >>
| < COLON : ":" >
| < SEMICOLON : ";" >
| < ASTERISK : "*" >
| < CLOSE_QUOTE :< QUOTE >>}

< CssStyleValueState > TOKEN :{
  < ANY_NO_SEMICOLON : (~[";"])+ >
}  


/** ******************************************************************** */
/** *************************  SWL GRAMMAR  **************************** */
/** ******************************************************************** */

ASTSwdlFile SwdlFile() :
{}
{
  NameDecl() ( Module() )+ <EOF>
  {    return jjtThis;
  }
}


void NameDecl() :
{}
{
  	< APP_NAME > 
 	AppName()
}

void AppName():
{ Token t;}
{
  t= < QUOTED_IDENTIFIER >
}
void Module() :
{}
{
  < MODULE >
  ModuleName()
  ModuleBody()
}

void ModuleName() :
{ Token t;}
{
  t = < NAME >
  {
    System.out.println("Matched module name :"+t.image);  }
}

void ModuleBody() :
{
}
{
	< OPEN_BRACKET >
	  ( Ui () )?
	  (Logic())?
	  (Domain() )?
	 < CLOSE_BRACKET >
}

void Ui() :{}
{  < UI >
  < OPEN_BRACKET >
   ( Screen() )*
 < CLOSE_BRACKET >  
}

void Screen() :{}
{
  < SCREEN >
  ScreenName()
  < OPEN_BRACKET >
 	MvcArea()
 < CLOSE_BRACKET >  }

void ScreenName() :
{
  Token t;}
{
  t= < NAME >
}

void Model() :
{
  
}
{
   < MODEL >
  GenericBlock()
}

void Controller() :{}
{
  < CONTROLLER >  GenericBlock()}


void GenericBlock() :
{
}
{
  < OPEN_BRACKET>
  	{
  	 token_source.SwitchTo(JsContentState);
  	 nestingLvl++;
  	}
  (< ANY_NON_OPEN_CLOSE > | GenericBlock())*
  < CLOSE_BRACKET >  {
    nestingLvl--;
    if ( nestingLvl == 0 )    {
      token_source.SwitchTo(DEFAULT);    }  }}void MvcArea() : {}
{
   (Model())?
  (Controller())?
  (Component())*}     


void Component(): {}
{
	(	  Input()
	| InputFile()
	| InputArea()
	| Checkbox()
	| Selectbox()
	| Label()
	| Radio()
	| Radios()
	| Img()
	// layout components
	| VerticalLayout()
	| HorizontalLayout()
	| HorizontalForm()
	| Section()
	// HTML components
	| Br()
	| H1()
	| H2()
	| H3()
	| H4()
	| H5()
	| H6()	 
	)
}

void VerticalLayout() : {}
{
    < VERTICAL_LAYOUT >
   	VerticalLayoutDescription()	
  	< OPEN_BRACKET >
  		MvcArea()
  	< CLOSE_BRACKET >}

void HorizontalLayout() : {}
{
  	< HORIZONTAL_LAYOUT >
  	HorizontalLayoutDescription()	
  	< OPEN_BRACKET >
  		MvcArea()
  	< CLOSE_BRACKET >
}


void HorizontalForm() : {}
{
  < HORIZONTAL_FORM >
}

void Section() : {}
{
  < SECTION >}


void Br() : {}
{
	< BR >  
}


void H1() : {}
{
  < H1 >
}

void H2() : {}
{
 < H2 > 
}

void H3() : {}
{
  < H3 >   
}

void H4() : {}
{
  <  H4 > 
}

void H5() : {}
{
  < H5 >
}

void H6() : {}
{
  < H6 >
}
void Input():  {}
{
  < INPUT > (StdInputDescription())? }


void InputFile(): {}
{
  < INPUT_FILE > (StdInputDescription())? 
}

void InputArea(): {}
{
  < INPUT_AREA >   (StdInputDescription())? 
}

void Checkbox(): {}
{
  < CHECKBOX > (StdInputDescription())? 
}

void Selectbox(): {}
{
  < SELECTBOX >  (SelectInputDescription())? (SelectboxOptions())?
}

void Radio(): {}
{
  < RADIO > (RadioInputDescription())?}

void Radios(): {}
{
  < RADIOS >  (RadiosInputDescription())? }

void Label(): {}
{
  < LABEL > (StdInputDescription())?}

void Img(): {}
{
  < IMG > (StdInputDescription())?}
 
void ModelVariable(): {}
{
     < LITERAL > | ( < VARIABLE > (< DOT > <VARIABLE >)* )}

void VerticalLayoutDescription(): {}
{
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(  CssStyle() )?	< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}

void HorizontalLayoutDescription():
{
  int noOfColumns = 0 ;
  int columnDescSpan = 0;
}
{
  
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		( <OPEN_S_BRACKET > CssStyle() < CLOSE_S_BRACKET > )?
		(
		 columnDescSpan = ColumnDescription() {
		    					noOfColumns = noOfColumns + columnDescSpan;
		    			}		)
		(
		  < COMMA >
		  columnDescSpan = ColumnDescription() {
		    					noOfColumns = noOfColumns + columnDescSpan;
		    			}
		)*
	< CLOSE_R_BRACKET > {
	  					  if (noOfColumns > 12) {
			    				throw new ParseException("A horizontal_layout is a bootstrap fluid layout and"+
			    									"cannot have more then 12 columns.");
			    		  }
			    		  token_source.SwitchTo(DEFAULT) ;
			    		}
}

int ColumnDescription() :
{
  Token t = null;
}
{	t = < NUMBER >
	(<OPEN_S_BRACKET > CssStyle() < CLOSE_S_BRACKET >)?
  {
    
    return Integer.parseInt(t.image);
  }
}


void RadioInputDescription() : {}
{		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(		   ModelVariable() // model value to bind to
			< COMMA > ModelVariable() // model value representing the value
			( < COMMA >  CssStyle() )?
		)?

		< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}

void RadiosInputDescription() : {}
{
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		   ModelVariable() 			  // model value to bind to
		   < COMMA > ModelVariable() // model values collection on which to iterate for the 'value' attribute of the radio
		 ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}

void SelectInputDescription() : {}
{
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		   ModelVariable() 			 // model value to bind to
		   < COMMA > ModelVariable() // model value representing the options
		   ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}


void SelectboxOptions() : {}
{
  < OPEN_BRACKET >

  	SelectOption()
 |  SelectOptionGroup()

  < CLOSE_BRACKET >}

void SelectOption() : {}
{
   < SELECTOPTION > (RadiosInputDescription())* // reuse the old production despite the bad name...}


void SelectOptionGroup() : {}
{
   < SELECTOPTIONGROUP > < OPEN_R_BRACKET > (SelectOption())* < CLOSE_R_BRACKET > 	
}


void StdInputDescription(): {}
{
  < OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
  
 	 ( 	   ModelVariable()  
 	   ( < COMMA >  CssStyle() )?
 	 )?
 	 
  < CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}}

void CssStyle(): {}
{
  < DESC_QUOTE > { token_source.SwitchTo(CssStyleState); }

  (
    LOOKAHEAD(CssClassName())   	CssClassName()
    |
  	CssInlineStyle()
  )*
 	 
  < CLOSE_QUOTE >  { token_source.SwitchTo(InputDescriptionState); }}
void CssClassName()  : {}
{	 < STYLE_CLASS >  < SEMICOLON >
}

void CssInlineStyle() : {}
{	
 	CssStyleName()
 	 < COLON > {token_source.SwitchTo(CssStyleValueState);} 	 	CssStyleValue()  {token_source.SwitchTo(CssStyleState);}
 	 < SEMICOLON >
}


void CssStyleName(): {}
{
  (< ASTERISK >)? < STYLE_CLASS >}

void CssStyleValue(): {}
{
   <ANY_NO_SEMICOLON > }


void Logic() : {}
{
  < LOGIC >
  < OPEN_BRACKET >
  < CLOSE_BRACKET >
}


void Domain() : {}
{
  < DOMAIN >
  < OPEN_BRACKET >
   < CLOSE_BRACKET >
}





  
