/* Generated By:JJTree&JavaCC: Do not edit this line. SWLTokenManager.java */
package ro.sft.recruiter;

/** Token Manager. */
public class SWLTokenManager implements SWLConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3fffffc7fc0000L) != 0L)
         {
            jjmatchedKind = 54;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x3f800001000000L) != 0L)
            return 1;
         if ((active0 & 0x7fffc6fc0000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000000000L) != 0L)
            return 1;
         if ((active0 & 0x7dffc6fc0000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x40000L) != 0L)
            return 1;
         if ((active0 & 0x7dffc6f80000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0xe1c4200000L) != 0L)
            return 1;
         if ((active0 & 0x7d1e02d80000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x18000580000L) != 0L)
            return 1;
         if ((active0 & 0x7c1f82800000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 5;
            return 1;
         }
         return -1;
      case 6:
         if ((active0 & 0x400000800000L) != 0L)
            return 1;
         if ((active0 & 0x3c1f82000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x3c1d82000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x200000000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x3c1982000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x400000000L) != 0L)
            return 1;
         return -1;
      case 9:
         if ((active0 & 0x3c1800000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 9;
            return 1;
         }
         if ((active0 & 0x182000000L) != 0L)
            return 1;
         return -1;
      case 10:
         if ((active0 & 0x3c1800000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x3c0000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 11;
            }
            return 1;
         }
         if ((active0 & 0x1800000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x3c1000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x3c1000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x81000000000L) != 0L)
         {
            if (jjmatchedPos != 14)
            {
               jjmatchedKind = 54;
               jjmatchedPos = 14;
            }
            return 1;
         }
         if ((active0 & 0x340000000000L) != 0L)
            return 1;
         return -1;
      case 15:
         if ((active0 & 0x281000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 16;
            return 1;
         }
         if ((active0 & 0x81000000000L) != 0L)
            return 1;
         return -1;
      case 17:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 18;
            return 1;
         }
         return -1;
      case 19:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 19;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 98:
         return jjMoveStringLiteralDfa1_4(0x810000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_4(0x202000000L);
      case 100:
         return jjMoveStringLiteralDfa1_4(0x100000L);
      case 104:
         return jjMoveStringLiteralDfa1_4(0x3f380000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_4(0x201c0000000L);
      case 108:
         return jjMoveStringLiteralDfa1_4(0x2000200000L);
      case 109:
         return jjMoveStringLiteralDfa1_4(0x4080000L);
      case 110:
         return jjMoveStringLiteralDfa1_4(0x40000L);
      case 114:
         return jjMoveStringLiteralDfa1_4(0xc000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_4(0x401c00c00000L);
      case 117:
         return jjMoveStringLiteralDfa1_4(0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa1_4(0x40000000000L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_4(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 48, 1);
         break;
      case 50:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 49, 1);
         break;
      case 51:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 50, 1);
         break;
      case 52:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 51, 1);
         break;
      case 53:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 52, 1);
         break;
      case 54:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 53, 1);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0xe000040000L);
      case 99:
         return jjMoveStringLiteralDfa2_4(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0x441c00800000L);
      case 104:
         return jjMoveStringLiteralDfa2_4(active0, 0x200000000L);
      case 105:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_4(1, 24, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa2_4(active0, 0x20000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_4(active0, 0x1c0000000L);
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x380006380000L);
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_4(1, 47, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_4(active0, 0x10000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(0, active0);
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_4(active0, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_4(active0, 0x400000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_4(active0, 0xc004080000L);
      case 101:
         return jjMoveStringLiteralDfa3_4(active0, 0x200000000L);
      case 103:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_4(2, 41, 1);
         return jjMoveStringLiteralDfa3_4(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa3_4(active0, 0x1c00000000L);
      case 109:
         return jjMoveStringLiteralDfa3_4(active0, 0x140000L);
      case 110:
         return jjMoveStringLiteralDfa3_4(active0, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa3_4(active0, 0x1c0000000L);
      case 114:
         return jjMoveStringLiteralDfa3_4(active0, 0x3c0000c00000L);
      case 116:
         return jjMoveStringLiteralDfa3_4(active0, 0x10000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(1, active0);
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_4(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa4_4(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_4(3, 18, 1);
         return jjMoveStringLiteralDfa4_4(active0, 0x3c04400000L);
      case 105:
         return jjMoveStringLiteralDfa4_4(active0, 0x38c000200000L);
      case 116:
         return jjMoveStringLiteralDfa4_4(active0, 0x450002000000L);
      case 117:
         return jjMoveStringLiteralDfa4_4(active0, 0x1c0080000L);
      case 118:
         return jjMoveStringLiteralDfa4_4(active0, 0x800000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(2, active0);
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(2, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(3, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_4(4, 21, 1);
         return jjMoveStringLiteralDfa5_4(active0, 0x1c00000000L);
      case 101:
         return jjMoveStringLiteralDfa5_4(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa5_4(active0, 0x440000900000L);
      case 107:
         return jjMoveStringLiteralDfa5_4(active0, 0x200000000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_4(4, 26, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_4(4, 37, 1);
         return jjMoveStringLiteralDfa5_4(active0, 0x80000L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_4(active0, 0x18000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_4(active0, 0x2000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_4(active0, 0x180000000L);
      case 122:
         return jjMoveStringLiteralDfa5_4(active0, 0x380000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(3, active0);
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(3, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(4, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_4(active0, 0x180000000L);
      case 98:
         return jjMoveStringLiteralDfa6_4(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa6_4(active0, 0x40000800000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_4(5, 19, 1);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_4(5, 20, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_4(5, 22, 1);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_4(5, 40, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_4(active0, 0x780002000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_4(5, 39, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_4(active0, 0x1c00000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(4, active0);
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(4, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(5, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_4(active0, 0x40080000000L);
      case 98:
         return jjMoveStringLiteralDfa7_4(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_4(6, 23, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_4(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa7_4(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_4(6, 46, 1);
         return jjMoveStringLiteralDfa7_4(active0, 0x380000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_4(active0, 0x1a00000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(5, active0);
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(5, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(6, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa8_4(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa8_4(active0, 0x40002000000L);
      case 111:
         return jjMoveStringLiteralDfa8_4(active0, 0x400000000L);
      case 112:
         return jjMoveStringLiteralDfa8_4(active0, 0x1800000000L);
      case 114:
         return jjMoveStringLiteralDfa8_4(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa8_4(active0, 0x380000000000L);
      case 120:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_4(7, 33, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(6, active0);
}
private int jjMoveStringLiteralDfa8_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(6, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(7, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 8;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_4(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_4(active0, 0x380000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_4(active0, 0x82000000L);
      case 108:
         return jjMoveStringLiteralDfa9_4(active0, 0x100000000L);
      case 116:
         return jjMoveStringLiteralDfa9_4(active0, 0x1800000000L);
      case 120:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_4(8, 34, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(7, active0);
}
private int jjMoveStringLiteralDfa9_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(7, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(8, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 9;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_4(9, 31, 1);
         break;
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_4(9, 32, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_4(active0, 0x1800000000L);
      case 108:
         return jjMoveStringLiteralDfa10_4(active0, 0x3c0000000000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_4(9, 25, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(8, active0);
}
private int jjMoveStringLiteralDfa10_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(8, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(9, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 10;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_4(active0, 0x380000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_4(active0, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_4(active0, 0x1800000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(9, active0);
}
private int jjMoveStringLiteralDfa11_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(9, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(10, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 11;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa12_4(active0, 0x300000000000L);
      case 108:
         return jjMoveStringLiteralDfa12_4(active0, 0x80000000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_4(active0, 0x1000000000L);
      case 121:
         return jjMoveStringLiteralDfa12_4(active0, 0x40000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(10, active0);
}
private int jjMoveStringLiteralDfa12_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(10, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(11, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 12;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_4(active0, 0x80000000000L);
      case 103:
         return jjMoveStringLiteralDfa13_4(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_4(active0, 0x340000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(11, active0);
}
private int jjMoveStringLiteralDfa13_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(11, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(12, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 13;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa14_4(active0, 0x301000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_4(active0, 0x40000000000L);
      case 121:
         return jjMoveStringLiteralDfa14_4(active0, 0x80000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(12, active0);
}
private int jjMoveStringLiteralDfa14_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(12, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(13, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 14;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_4(active0, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa15_4(active0, 0x81000000000L);
      case 116:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_4(14, 42, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(13, active0);
}
private int jjMoveStringLiteralDfa15_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(13, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(14, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 15;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa16_4(active0, 0x200000000000L);
      case 117:
         return jjMoveStringLiteralDfa16_4(active0, 0x81000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(14, active0);
}
private int jjMoveStringLiteralDfa16_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(14, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(15, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 16;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa17_4(active0, 0x200000000000L);
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_4(16, 36, 1);
         break;
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_4(16, 43, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(15, active0);
}
private int jjMoveStringLiteralDfa17_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(15, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(16, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 17;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa18_4(active0, 0x200000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(16, active0);
}
private int jjMoveStringLiteralDfa18_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(16, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(17, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 18;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa19_4(active0, 0x200000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(17, active0);
}
private int jjMoveStringLiteralDfa19_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(17, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(18, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 19;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa20_4(active0, 0x200000000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(18, active0);
}
private int jjMoveStringLiteralDfa20_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_4(18, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_4(19, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 20;
   }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 112:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_4(20, 45, 1);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_4(19, active0);
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_4(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 36)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 3:
                  if (curChar == 47)
                     jjCheckNAddStates(5, 7);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 42)
                     jjAddStates(8, 9);
                  break;
               case 11:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0x3ff201000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 18:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  jjAddStates(5, 7);
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  jjCheckNAddTwoStates(12, 10);
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 9:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 15:
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_3(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_3(0, 3, 0);
      case 13:
         return jjStartNfaWithStates_3(0, 4, 0);
      case 32:
         return jjStartNfaWithStates_3(0, 1, 0);
      case 40:
         return jjStartNfaWithStates_3(0, 9, 0);
      case 41:
         return jjStartNfaWithStates_3(0, 10, 0);
      case 91:
         return jjStartNfaWithStates_3(0, 11, 0);
      case 93:
         return jjStartNfaWithStates_3(0, 12, 0);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_3(1, 0);
   }
}
private int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_3(state, pos + 1);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  break;
               case 0:
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 47)
                     jjCheckNAddStates(14, 16);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 42)
                     jjAddStates(17, 18);
                  break;
               case 10:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 12:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  jjAddStates(14, 16);
                  break;
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 44:
         return jjStopAtPos(0, 58);
      case 46:
         return jjStopAtPos(0, 59);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjstateSet[jjnewStateCnt++] = 1;
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 61)
                        kind = 61;
                  }
                  else if (curChar == 47)
                     jjAddStates(19, 20);
                  else if (curChar == 36)
                  {
                     if (kind > 57)
                        kind = 57;
                     jjCheckNAdd(3);
                  }
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 2:
                  if (curChar != 36)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xf7fffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 60)
                     kind = 60;
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xf7ffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L && kind > 61)
                     kind = 61;
                  break;
               case 11:
                  if (curChar == 47)
                     jjAddStates(19, 20);
                  break;
               case 12:
                  if (curChar == 47)
                     jjCheckNAddStates(21, 23);
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 14:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 15:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 16:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 42)
                     jjAddStates(24, 25);
                  break;
               case 20:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 21:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 22:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  jjAddStates(26, 27);
                  break;
               case 8:
                  jjAddStates(28, 29);
                  break;
               case 13:
                  jjAddStates(21, 23);
                  break;
               case 18:
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
               case 21:
                  jjCheckNAddTwoStates(21, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(26, 27);
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(28, 29);
                  break;
               case 13:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(21, 23);
                  break;
               case 18:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
               case 21:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 65);
      case 58:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 64);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                  }
                  else if (curChar == 47)
                     jjAddStates(30, 31);
                  else if (curChar == 36)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x8400000000L & l) != 0L && kind > 66)
                     kind = 66;
                  break;
               case 3:
                  if (curChar == 47)
                     jjAddStates(30, 31);
                  break;
               case 4:
                  if (curChar == 47)
                     jjCheckNAddStates(32, 34);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(32, 34);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 42)
                     jjAddStates(35, 36);
                  break;
               case 12:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 13:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 14:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  jjAddStates(32, 34);
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  jjCheckNAddTwoStates(13, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(32, 34);
                  break;
               case 10:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_0(0, 3, 0);
      case 13:
         return jjStartNfaWithStates_0(0, 4, 0);
      case 32:
         return jjStartNfaWithStates_0(0, 1, 0);
      case 40:
         return jjStartNfaWithStates_0(0, 9, 0);
      case 41:
         return jjStartNfaWithStates_0(0, 10, 0);
      case 91:
         return jjStartNfaWithStates_0(0, 11, 0);
      case 93:
         return jjStartNfaWithStates_0(0, 12, 0);
      case 123:
         return jjStartNfaWithStates_0(0, 7, 0);
      case 125:
         return jjStartNfaWithStates_0(0, 8, 0);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(1, 0);
   }
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 67)
                        kind = 67;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 47)
                     jjCheckNAddStates(14, 16);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 42)
                     jjAddStates(17, 18);
                  break;
               case 10:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 12:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  jjAddStates(14, 16);
                  break;
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 67)
                     kind = 67;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}
static final int[] jjnextStates = {
   15, 18, 19, 3, 8, 4, 5, 7, 11, 13, 18, 19, 2, 7, 3, 4, 
   6, 10, 12, 12, 17, 13, 14, 16, 20, 22, 5, 6, 8, 9, 4, 9, 
   5, 6, 8, 12, 14, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\173", "\175", "\50", "\51", "\133", 
"\135", null, null, null, null, null, "\156\141\155\145", "\155\157\144\165\154\145", 
"\144\157\155\141\151\156", "\154\157\147\151\143", "\163\143\162\145\145\156", 
"\163\145\162\166\151\143\145", "\165\151", "\143\157\156\164\162\157\154\154\145\162", 
"\155\157\144\145\154", null, null, null, "\151\156\160\165\164", 
"\151\156\160\165\164\137\141\162\145\141", "\151\156\160\165\164\137\146\151\154\145", 
"\143\150\145\143\153\142\157\170", "\163\145\154\145\143\164\142\157\170", 
"\163\145\154\145\143\164\157\160\164\151\157\156", "\163\145\154\145\143\164\157\160\164\151\157\156\147\162\157\165\160", 
"\154\141\142\145\154", "\162\141\144\151\157", "\162\141\144\151\157\163", 
"\142\165\164\164\157\156", "\151\155\147", 
"\166\145\162\164\151\143\141\154\137\154\141\171\157\165\164", "\150\157\162\151\172\157\156\164\141\154\137\154\141\171\157\165\164", 
"\150\157\162\151\172\157\156\164\141\154\137\146\157\162\155", 
"\150\157\162\151\172\157\156\164\141\154\137\146\157\162\155\137\147\162\157\165\160", "\163\145\143\164\151\157\156", "\142\162", "\150\61", "\150\62", "\150\63", 
"\150\64", "\150\65", "\150\66", null, null, null, null, "\54", "\56", null, null, null, 
"\72", "\73", "\52", null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "CssStyleValueState",
   "CssStyleState",
   "InputDescriptionState",
   "JsContentState",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff7fc1f81L, 0xfL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[23];
private final int[] jjstateSet = new int[46];
protected char curChar;
/** Constructor. */
public SWLTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SWLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 23; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   t = Token.newToken(jjmatchedKind, curTokenImage);

   return t;
}

int curLexState = 4;
int defaultLexState = 4;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      debugStream.println("Returning the <EOF> token.");
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
       {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
             curChar = input_stream.BeginToken();
       }
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
       {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
             curChar = input_stream.BeginToken();
       }
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
       {
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
             curChar = input_stream.BeginToken();
       }
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
      debugStream.println("<" + lexStateNames[curLexState] + ">" + "Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
       curPos = jjMoveStringLiteralDfa0_4();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
        {
           debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
           input_stream.backup(curPos - jjmatchedPos - 1);
        }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0, 1, },
   { 0, 1, },
   { 2 },
   { 3 },
   { 4 },
   { 5 },
   { 6 },
   { 7 },
   { 8 },
   { 9 },
   { 10 },
   { 11 },
   { 12 },
 },
 {
   { 0, 2, 3, },
   { 1 },
   { 0, 2, 3, },
   { 0, 2, 3, },
   { 4 },
   { 5 },
   { 6 },
   { 7 },
   { 8 },
   { 9 },
   { 10 },
   { 11 },
   { 12 },
   { 13 },
   { 14 },
 },
 {
   { 0, 2, 4, 7, 10, 11, },
   { 1 },
   { 0, 2, 4, 7, 10, 11, },
   { 3 },
   { 0, 2, 4, 7, 10, 11, },
   { 5 },
   { 6 },
   { 0, 2, 4, 7, 10, 11, },
   { 8 },
   { 9 },
   { 0, 2, 4, 7, 10, 11, },
   { 0, 2, 4, 7, 10, 11, },
   { 12 },
   { 13 },
   { 14 },
   { 15 },
   { 16 },
   { 17 },
   { 18 },
   { 19 },
   { 20 },
   { 21 },
   { 22 },
 },
 {
   { 0, 1, },
   { 0, 1, },
   { 2 },
   { 3 },
   { 4 },
   { 5 },
   { 6 },
   { 7 },
   { 8 },
   { 9 },
   { 10 },
   { 11 },
   { 12 },
 },
 {
   { 0, 2, 14, },
   { 1 },
   { 0, 2, 14, },
   { 3 },
   { 4 },
   { 5 },
   { 6 },
   { 7 },
   { 8 },
   { 9 },
   { 10 },
   { 11 },
   { 12 },
   { 13 },
   { 0, 2, 14, },
   { 15 },
   { 16 },
   { 17 },
   { 18 },
   { 19 },
 },

};
protected static final int[][] kindForState = {
{ 67, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6},
{ 62, 62, 66, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
  6},
{ 56, 56, 57, 57, 60, 60, 60, 60, 60, 60, 61, 5, 5, 5,
  5, 5, 5, 6, 6, 6, 6, 6, 6},
{ 55, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6},
{ 54, 54, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
  28, 28, 28, 28, 29, 29}
};
   int kindCnt = 0;
  protected  final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }

  protected  final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[68];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
