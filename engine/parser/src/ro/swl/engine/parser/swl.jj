/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. swl.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
             
  KEEP_LINE_COLUMN = false;
  static = false;
                         
  //DEBUG_PARSER=true;
  //DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(SWL)
package ro.swl.engine.parser;

public class SWL/*@bgen(jjtree)*/implements SWLTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSWLState jjtree = new JJTSWLState();

/*@egen*/

  private int nestingLvl = 0;

  
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");
    SWL parser = new SWL(System.in);
    try
    {
      ASTSwdlFile n = parser.SwdlFile();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }
}

PARSER_END(SWL)

<*> SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}
<*> TOKEN :
{
  <OPEN_BRACKET: "{" >
| <CLOSE_BRACKET: "}" >
| < OPEN_R_BRACKET: "(" >
| < CLOSE_R_BRACKET: ")" >
| < OPEN_S_BRACKET: "[" >
| < CLOSE_S_BRACKET: "]" >}

<DEFAULT> TOKEN :
{
  <#ALPHA_CHAR: [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff"
      ] >
| <#NUM_CHAR:   [
       "0"-"9"
      ] >
| <#ALPHANUM_CHAR: ( <ALPHA_CHAR> | <NUM_CHAR> ) >
| <#IDENTIFIER_CHAR: ( <ALPHANUM_CHAR> | [ "_", "-" ] ) >
| <#QUOTE:      ( "'" | "\"" )>
| <APP_NAME : "name">
| <MODULE: "module"  > 
| < DOMAIN: "domain" >
| < LOGIC: "logic" >
| < SCREEN : "screen"> 
| < SERVICE :"service" >
| < UI : "ui" > 
| < CONTROLLER: "controller" >
| < MODEL: "model" > 
| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| <QUOTED_IDENTIFIER: < QUOTE > <IDENTIFIER > < QUOTE >>
| <QUOTED_TEXT: < QUOTE > (~["\"","'"])* < QUOTE >>
// Model components
| < INPUT: "input" >
| < INPUT_AREA: "input_area" >
| < INPUT_FILE: "input_file" >
| < CHECKBOX: "checkbox" >
| < SELECTBOX: "selectbox" >
| < SELECTOPTION: "selectoption" >
| < SELECTOPTIONGROUP: "selectoptiongroup" >
| < LABEL: "label" >
| < RADIO: "radio" >
| < RADIOS: "radios" >
| < BUTTON: "button" >
| < BUTTONGROUP: "button_group" >
| < IMG: "img" >

// Layout Components

| < VERTICAL_LAYOUT: "vertical_layout" >
| < HORIZONTAL_LAYOUT: "horizontal_layout" >
| < HORIZONTAL_FORM: "horizontal_form" >
| < HORIZONTAL_FORM_GROUP: "horizontal_form_group" >
| < SECTION: "section" >


// HTML components
| < BR: "br" >
| < H1: "h1" >
| < H2: "h2" >
| < H3: "h3" >
| < H4: "h4" >
| < H5: "h5" >
| < H6: "h6" >
| < UL: "ul" >
| < LI: "li" >
| < NAME: < IDENTIFIER >> 
}

< JsContentState > TOKEN:
{
  < ANY_NON_OPEN_CLOSE: (~["{","}"])+ >
}

< InputDescriptionState > TOKEN:
{
  < NUMBER : < NUM_CHAR > (< NUM_CHAR >)? >
| < VARIABLE : < IDENTIFIER >>
| < COMMA : "," >
| < DOT: "." >
| < LITERAL: ("\"" (~["\"",";"])* "\"") | ("'" (~["'",";"])* "'") >
| < DESC_QUOTE :< QUOTE >>
}

< CssStyleState > TOKEN :
{
  < STYLE_CLASS : < IDENTIFIER >>
| < COLON : ":" >
| < SEMICOLON : ";" >
| < ASTERISK : "*" >
| < CLOSE_QUOTE :< QUOTE >>}

< CssStyleValueState > TOKEN :{
  < ANY_NO_SEMICOLON : (~[";"])+ >
}  


/** ******************************************************************** */
/** *************************  SWL GRAMMAR  **************************** */
/** ******************************************************************** */

ASTSwdlFile SwdlFile() :
{/*@bgen(jjtree) SwdlFile */
  ASTSwdlFile jjtn000 = new ASTSwdlFile(JJTSWDLFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwdlFile */
  try {
/*@egen*/
  NameDecl() ( Module() )+ <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void NameDecl() :
{/*@bgen(jjtree) NameDecl */
  ASTNameDecl jjtn000 = new ASTNameDecl(JJTNAMEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NameDecl */
        try {
/*@egen*/
  	< APP_NAME > 
 	AppName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AppName():
{/*@bgen(jjtree) AppName */
  ASTAppName jjtn000 = new ASTAppName(JJTAPPNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) AppName */
  try {
/*@egen*/
  t= < QUOTED_IDENTIFIER >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Module() :
{/*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/
  < MODULE >
  ModuleName()
  ModuleBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ModuleName() :
{/*@bgen(jjtree) ModuleName */
  ASTModuleName jjtn000 = new ASTModuleName(JJTMODULENAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) ModuleName */
  try {
/*@egen*/
  t = < NAME >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    System.out.println("Matched module name :"+t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ModuleBody() :
{/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) ModuleBody */
        try {
/*@egen*/
	< OPEN_BRACKET >
	  ( Ui () )?
	  (Logic())?
	  (Domain() )?
	 < CLOSE_BRACKET >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Ui() :{/*@bgen(jjtree) Ui */
  ASTUi jjtn000 = new ASTUi(JJTUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Ui */
  try {
/*@egen*/  < UI >
  < OPEN_BRACKET >
   ( Screen() )*
 < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Screen() :{/*@bgen(jjtree) Screen */
  ASTScreen jjtn000 = new ASTScreen(JJTSCREEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Screen */
  try {
/*@egen*/
  < SCREEN >
  ScreenName()
  < OPEN_BRACKET >
 	MvcArea()
 < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  }

void ScreenName() :
{/*@bgen(jjtree) ScreenName */
  ASTScreenName jjtn000 = new ASTScreenName(JJTSCREENNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;}
{/*@bgen(jjtree) ScreenName */
  try {
/*@egen*/
  t= < NAME >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Model() :
{/*@bgen(jjtree) Model */
  ASTModel jjtn000 = new ASTModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  
}
{/*@bgen(jjtree) Model */
   try {
/*@egen*/
   < MODEL >
  GenericBlock()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Controller() :{/*@bgen(jjtree) Controller */
  ASTController jjtn000 = new ASTController(JJTCONTROLLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Controller */
  try {
/*@egen*/
  < CONTROLLER >  GenericBlock()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}


void GenericBlock() :
{/*@bgen(jjtree) GenericBlock */
  ASTGenericBlock jjtn000 = new ASTGenericBlock(JJTGENERICBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) GenericBlock */
  try {
/*@egen*/
  < OPEN_BRACKET>
  	{
  	 token_source.SwitchTo(JsContentState);
  	 nestingLvl++;
  	}
  (< ANY_NON_OPEN_CLOSE > | GenericBlock())*
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {
    nestingLvl--;
    if ( nestingLvl == 0 )    {
      token_source.SwitchTo(DEFAULT);    }  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}void MvcArea() : {/*@bgen(jjtree) MvcArea */
  ASTMvcArea jjtn000 = new ASTMvcArea(JJTMVCAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MvcArea */
   try {
/*@egen*/
   (Model())?
  (Controller())?
  (	
	  Input()
	| InputFile()
	| InputArea()
	| Checkbox()
	| Selectbox()
	| Label()
	| Radio()
	| Radios()
	| Img()
	| Button()
	| ButtonGroup()
	// layout components
	| VerticalLayout()
	| HorizontalLayout()
	| HorizontalForm()
	| HorizontalFormGroup()
	| Section()
	// HTML components
	| Br()
	| H1()
	| H2()
	| H3()
	| H4()
	| H5()
	| H6()
	| Ul()	 
	)*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}

ASTVerticalLayout VerticalLayout() : {/*@bgen(jjtree) VerticalLayout */
  ASTVerticalLayout jjtn000 = new ASTVerticalLayout(JJTVERTICALLAYOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VerticalLayout */
    try {
/*@egen*/
    < VERTICAL_LAYOUT >
   	StdLayoutDescription()	
  	< OPEN_BRACKET >
  		MvcArea()
  	< CLOSE_BRACKET >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/  	{
  	  return jjtn000;  	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/}

ASTHorizontalLayout HorizontalLayout() : {/*@bgen(jjtree) HorizontalLayout */
  ASTHorizontalLayout jjtn000 = new ASTHorizontalLayout(JJTHORIZONTALLAYOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HorizontalLayout */
        try {
/*@egen*/
  	< HORIZONTAL_LAYOUT >
  	HorizontalLayoutDescription()	
  	< OPEN_BRACKET >
  		MvcArea()
  	< CLOSE_BRACKET >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/

  	{  	   return jjtn000;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


ASTHorizontalForm HorizontalForm() : {/*@bgen(jjtree) HorizontalForm */
  ASTHorizontalForm jjtn000 = new ASTHorizontalForm(JJTHORIZONTALFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HorizontalForm */
  try {
/*@egen*/
  < HORIZONTAL_FORM >
  StdLayoutDescription()
  < OPEN_BRACKET >
  		MvcArea()
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTHorizontalFormGroup HorizontalFormGroup() : {/*@bgen(jjtree) HorizontalFormGroup */
  ASTHorizontalFormGroup jjtn000 = new ASTHorizontalFormGroup(JJTHORIZONTALFORMGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HorizontalFormGroup */
   try {
/*@egen*/
   < HORIZONTAL_FORM_GROUP >
    StdLayoutDescription()
   < OPEN_BRACKET >
  		MvcArea()
   < CLOSE_BRACKET >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    return jjtn000;
  }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/}

ASTSection Section() : {/*@bgen(jjtree) Section */
  ASTSection jjtn000 = new ASTSection(JJTSECTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Section */
  try {
/*@egen*/
  < SECTION >
   StdInputDescription()
  < OPEN_BRACKET >
  		MvcArea()
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}


void Br() : {/*@bgen(jjtree) Br */
  ASTBr jjtn000 = new ASTBr(JJTBR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Br */
        try {
/*@egen*/
	< BR >  < OPEN_R_BRACKET > <CLOSE_R_BRACKET >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void H1() : {/*@bgen(jjtree) H1 */
  ASTH1 jjtn000 = new ASTH1(JJTH1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) H1 */
  try {
/*@egen*/
  < H1 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void H2() : {/*@bgen(jjtree) H2 */
  ASTH2 jjtn000 = new ASTH2(JJTH2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) H2 */
 try {
/*@egen*/
 < H2 >/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void H3() : {/*@bgen(jjtree) H3 */
  ASTH3 jjtn000 = new ASTH3(JJTH3);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) H3 */
  try {
/*@egen*/
  < H3 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/   
}

void H4() : {/*@bgen(jjtree) H4 */
  ASTH4 jjtn000 = new ASTH4(JJTH4);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) H4 */
  try {
/*@egen*/
  <  H4 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void H5() : {/*@bgen(jjtree) H5 */
  ASTH5 jjtn000 = new ASTH5(JJTH5);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) H5 */
  try {
/*@egen*/
  < H5 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void H6() : {/*@bgen(jjtree) H6 */
  ASTH6 jjtn000 = new ASTH6(JJTH6);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) H6 */
  try {
/*@egen*/
  < H6 >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Ul() : {/*@bgen(jjtree) Ul */
  ASTUl jjtn000 = new ASTUl(JJTUL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Ul */
  try {
/*@egen*/
  < UL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
ASTInput Input():  {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
  try {
/*@egen*/
  < INPUT > (StdInputDescription())?/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }


ASTInputFile InputFile(): {/*@bgen(jjtree) InputFile */
  ASTInputFile jjtn000 = new ASTInputFile(JJTINPUTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InputFile */
  try {
/*@egen*/
  < INPUT_FILE > (StdInputDescription())?/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

ASTInputArea InputArea(): {/*@bgen(jjtree) InputArea */
  ASTInputArea jjtn000 = new ASTInputArea(JJTINPUTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InputArea */
  try {
/*@egen*/
  < INPUT_AREA >   (StdInputDescription())?/*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn000, true);
                                              jjtc000 = false;
                                            }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

ASTCheckbox Checkbox(): {/*@bgen(jjtree) Checkbox */
  ASTCheckbox jjtn000 = new ASTCheckbox(JJTCHECKBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Checkbox */
  try {
/*@egen*/
  < CHECKBOX > (StdInputDescription())?/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

ASTSelectbox Selectbox(): {/*@bgen(jjtree) Selectbox */
  ASTSelectbox jjtn000 = new ASTSelectbox(JJTSELECTBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Selectbox */
  try {
/*@egen*/
  < SELECTBOX >  (SelectInputDescription())? (SelectboxOptions())?/*@bgen(jjtree)*/
                                                                   {
                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                     jjtc000 = false;
                                                                   }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

ASTRadio Radio(): {/*@bgen(jjtree) Radio */
  ASTRadio jjtn000 = new ASTRadio(JJTRADIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Radio */
  try {
/*@egen*/
  < RADIO > (RadioInputDescription())?/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

ASTRadios Radios(): {/*@bgen(jjtree) Radios */
  ASTRadios jjtn000 = new ASTRadios(JJTRADIOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Radios */
  try {
/*@egen*/
  < RADIOS >  (RadiosInputDescription())?/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn000, true);
                                            jjtc000 = false;
                                          }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

ASTLabel Label(): {/*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Label */
  try {
/*@egen*/
  < LABEL > (StdInputDescription())?/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

ASTImg Img(): {/*@bgen(jjtree) Img */
  ASTImg jjtn000 = new ASTImg(JJTIMG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Img */
  try {
/*@egen*/
  < IMG > (StdInputDescription())?/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ }

void ButtonGroup() : {/*@bgen(jjtree) ButtonGroup */
  ASTButtonGroup jjtn000 = new ASTButtonGroup(JJTBUTTONGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ButtonGroup */
        try {
/*@egen*/
	< BUTTONGROUP > < OPEN_BRACKET > (Button())* < CLOSE_BRACKET >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTButton Button() : {/*@bgen(jjtree) Button */
  ASTButton jjtn000 = new ASTButton(JJTBUTTON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Button */
        try {
/*@egen*/
	< BUTTON > (ButtonDescription())?/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void ButtonDescription() : {/*@bgen(jjtree) ButtonDescription */
  ASTButtonDescription jjtn000 = new ASTButtonDescription(JJTBUTTONDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ButtonDescription */
        try {
/*@egen*/  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(		  ButtonAction()
		  (< COMMA > CssStyle() )?
		)?
  	< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { token_source.SwitchTo(DEFAULT); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ButtonAction() : {/*@bgen(jjtree) ButtonAction */
  ASTButtonAction jjtn000 = new ASTButtonAction(JJTBUTTONACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ButtonAction */
  try {
/*@egen*/
  < VARIABLE > <OPEN_R_BRACKET > (<VARIABLE > (< DOT > <VARIABLE >)*)*  < CLOSE_R_BRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

 
void ModelVariable(): {/*@bgen(jjtree) ModelVariable */
  ASTModelVariable jjtn000 = new ASTModelVariable(JJTMODELVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModelVariable */
     try {
/*@egen*/
     < LITERAL > | ( < VARIABLE > (< DOT > <VARIABLE >)* )/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/}

void StdLayoutDescription(): {/*@bgen(jjtree) StdLayoutDescription */
  ASTStdLayoutDescription jjtn000 = new ASTStdLayoutDescription(JJTSTDLAYOUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StdLayoutDescription */
        try {
/*@egen*/
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(  CssStyle() )?	< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void HorizontalLayoutDescription():
{/*@bgen(jjtree) HorizontalLayoutDescription */
  ASTHorizontalLayoutDescription jjtn000 = new ASTHorizontalLayoutDescription(JJTHORIZONTALLAYOUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int noOfColumns = 0 ;
  int columnDescSpan = 0;
}
{/*@bgen(jjtree) HorizontalLayoutDescription */
        try {
/*@egen*/
  
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		( <OPEN_S_BRACKET > CssStyle() < CLOSE_S_BRACKET > )?
		(			  (
			 columnDescSpan = ColumnDescription() {
			    					noOfColumns = noOfColumns + columnDescSpan;
			    			}			)
			(
			  < COMMA >
			  columnDescSpan = ColumnDescription() {
			    					noOfColumns = noOfColumns + columnDescSpan;
			    			}
			)*
		)?
	< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {
	  					  if (noOfColumns > 12) {
			    				throw new ParseException("A horizontal_layout is a bootstrap fluid layout and"+
			    									"cannot have more than 12 columns.");
			    		  }
			    		  token_source.SwitchTo(DEFAULT) ;
			    		}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

int ColumnDescription() :
{/*@bgen(jjtree) ColumnDescription */
  ASTColumnDescription jjtn000 = new ASTColumnDescription(JJTCOLUMNDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) ColumnDescription */
        try {
/*@egen*/	t = < NUMBER >
	(<OPEN_S_BRACKET > CssStyle() < CLOSE_S_BRACKET >)?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setImage(t.image);
    return Integer.parseInt(t.image);
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void RadioInputDescription() : {/*@bgen(jjtree) RadioInputDescription */
  ASTRadioInputDescription jjtn000 = new ASTRadioInputDescription(JJTRADIOINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RadioInputDescription */
                try {
/*@egen*/		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(		   ModelVariable() // model value to bind to
			< COMMA > ModelVariable() // model value representing the value
			( < COMMA >  CssStyle() )?
		)?

		< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void RadiosInputDescription() : {/*@bgen(jjtree) RadiosInputDescription */
  ASTRadiosInputDescription jjtn000 = new ASTRadiosInputDescription(JJTRADIOSINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RadiosInputDescription */
                try {
/*@egen*/
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		   ModelVariable() 			  // model value to bind to
		   < COMMA > ModelVariable() // model values collection on which to iterate for the 'value' attribute of the radio
		 ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void SelectInputDescription() : {/*@bgen(jjtree) SelectInputDescription */
  ASTSelectInputDescription jjtn000 = new ASTSelectInputDescription(JJTSELECTINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectInputDescription */
                try {
/*@egen*/
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		   ModelVariable() 			 // model value to bind to
		   < COMMA > ModelVariable() // model value representing the options
		   ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}


void SelectboxOptions() : {/*@bgen(jjtree) SelectboxOptions */
  ASTSelectboxOptions jjtn000 = new ASTSelectboxOptions(JJTSELECTBOXOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectboxOptions */
  try {
/*@egen*/
  < OPEN_BRACKET >

  	SelectOption()
 |  SelectOptionGroup()

  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void SelectOption() : {/*@bgen(jjtree) SelectOption */
  ASTSelectOption jjtn000 = new ASTSelectOption(JJTSELECTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectOption */
   try {
/*@egen*/
   < SELECTOPTION > (RadiosInputDescription())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ // reuse the old production despite the bad name...}


void SelectOptionGroup() : {/*@bgen(jjtree) SelectOptionGroup */
  ASTSelectOptionGroup jjtn000 = new ASTSelectOptionGroup(JJTSELECTOPTIONGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectOptionGroup */
   try {
/*@egen*/
   < SELECTOPTIONGROUP > < OPEN_R_BRACKET > (SelectOption())* < CLOSE_R_BRACKET >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 	
}


void StdInputDescription(): {/*@bgen(jjtree) StdInputDescription */
  ASTStdInputDescription jjtn000 = new ASTStdInputDescription(JJTSTDINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StdInputDescription */
  try {
/*@egen*/
  < OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
  
 	 ( 	   ModelVariable()  
 	   ( < COMMA >  CssStyle() )?
 	 )?
 	 
  < CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void CssStyle(): {/*@bgen(jjtree) CssStyle */
  ASTCssStyle jjtn000 = new ASTCssStyle(JJTCSSSTYLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CssStyle */
  try {
/*@egen*/
  < DESC_QUOTE > { token_source.SwitchTo(CssStyleState); }

  (
    LOOKAHEAD(CssClassName())   	CssClassName()
    |
  	CssInlineStyle()
  )*
 	 
  < CLOSE_QUOTE >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  { token_source.SwitchTo(InputDescriptionState); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}
void CssClassName()  : {/*@bgen(jjtree) CssClassName */
                        ASTCssClassName jjtn000 = new ASTCssClassName(JJTCSSCLASSNAME);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CssClassName */
        try {
/*@egen*/	t = < STYLE_CLASS >  < SEMICOLON >/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		jjtn000.setImage(t.image); 
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CssInlineStyle() : {/*@bgen(jjtree) CssInlineStyle */
                         ASTCssInlineStyle jjtn000 = new ASTCssInlineStyle(JJTCSSINLINESTYLE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/String t1 = null; String t2 = null;}
{/*@bgen(jjtree) CssInlineStyle */
    try {
/*@egen*/    t1 =  CssStyleName()
 	 < COLON > {token_source.SwitchTo(CssStyleValueState);} 	t2 =  CssStyleValue()  {token_source.SwitchTo(CssStyleState);}
 	 < SEMICOLON >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setImage(t1 + ": "+t2); 
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


String CssStyleName():  {/*@bgen(jjtree) CssStyleName */
                         ASTCssStyleName jjtn000 = new ASTCssStyleName(JJTCSSSTYLENAME);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CssStyleName */
  try {
/*@egen*/
  (< ASTERISK >)? t = < STYLE_CLASS >/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

String CssStyleValue(): {/*@bgen(jjtree) CssStyleValue */
                         ASTCssStyleValue jjtn000 = new ASTCssStyleValue(JJTCSSSTYLEVALUE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CssStyleValue */
  try {
/*@egen*/
  t = <ANY_NO_SEMICOLON >/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {  return t.image.trim();  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}


void Logic() : {/*@bgen(jjtree) Logic */
  ASTLogic jjtn000 = new ASTLogic(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Logic */
  try {
/*@egen*/
  < LOGIC >
  < OPEN_BRACKET >
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Domain() : {/*@bgen(jjtree) Domain */
  ASTDomain jjtn000 = new ASTDomain(JJTDOMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Domain */
  try {
/*@egen*/
  < DOMAIN >
  < OPEN_BRACKET >
   < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}





  
