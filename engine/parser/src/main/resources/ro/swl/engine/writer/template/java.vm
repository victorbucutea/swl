package $model.Package;


#foreach( $import in $model.Imports )
import $import;
#end

#foreach( $annotation in $model.Annotations )
$annotation.toJavaRepresentation()
#end
public class $model.Name #if($model.isSubClass())extends $model.SuperClass#end { 

#foreach( $field in $model.StaticFinalProperties )
#foreach( $annotation in $field.Annotations )
	$annotation.toJavaRepresentation()
#end
	public static final $field.Type.ParameterizedName $field.Name = $field.InitializingExpression;

#end

#foreach( $field in $model.Fields )
#foreach( $annotation in $field.Annotations )
	$annotation.toJavaRepresentation()
#end
	private $field.Type.ParameterizedName $field.Name;

#end

#foreach( $method in $model.Methods )
#foreach( $annotation in $method.Annotations )
	$annotation.toJavaRepresentation()
#end
	public ${method.ReturnType.ParameterizedName} ${method.Name}(#foreach($param in ${method.Parameters})#foreach($ann in ${param.Annotations})$ann.toJavaRepresentation() #end${param.Type.ParameterizedName}#if($param.isVarArg())...#end ${param.Name}#if( $velocityCount < $method.Parameters.size() ), #end#end) {
	
#foreach($stmt in $method.Body)
		$stmt.toJavaRepresentation()
#end
	}

#end

#foreach( $field in $model.Fields)
#foreach( $annotation in  $field.GetterAnnotations )
	$annotation.toJavaRepresentation()
#end
#if( $field.hasGetter() )
	public $field.Type.ParameterizedName get${field.UpperCamelName}() {
		return this.${field.Name};
	}

#end
#foreach( $annotation in  $field.SetterAnnotations )
	$annotation.toJavaRepresentation()
#end
#if( $field.hasSetter() )
	public void set${field.UpperCamelName}($field.Type.ParameterizedName ${field.Name}) {
		this.${field.Name} = ${field.Name};
	}

#end
#end

}