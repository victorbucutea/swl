/* Generated By:JJTree&JavaCC: Do not edit this line. SWL.java */
package ro.swl.engine.parser;

public class SWL/*@bgen(jjtree)*/implements SWLTreeConstants, SWLConstants {/*@bgen(jjtree)*/
  protected JJTSWLState jjtree = new JJTSWLState();
  private int nestingLvl = 0;


  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    SWL parser = new SWL(System.in);
    try
    {
      ASTSwdlApp n = parser.SwdlApp();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

/** ******************************************************************** */
/** *************************  SWL GRAMMAR  **************************** */
/** ******************************************************************** */
  final public ASTSwdlApp SwdlApp() throws ParseException {
 /*@bgen(jjtree) SwdlApp */
  ASTSwdlApp jjtn000 = new ASTSwdlApp(JJTSWDLAPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      NameDecl();
      label_1:
      while (true) {
        Module();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MODULE:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void NameDecl() throws ParseException {
                  /*@bgen(jjtree) NameDecl */
  ASTNameDecl jjtn000 = new ASTNameDecl(JJTNAMEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(APP_NAME);
      AppName();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void AppName() throws ParseException {
                 /*@bgen(jjtree) AppName */
                 ASTAppName jjtn000 = new ASTAppName(JJTAPPNAME);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(QUOTED_IDENTIFIER);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
        jjtn000.setImageWithoutQuote(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Module() throws ParseException {
                 /*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODULE);
      ModuleName();
      ModuleBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModuleName() throws ParseException {
                     /*@bgen(jjtree) ModuleName */
                     ASTModuleName jjtn000 = new ASTModuleName(JJTMODULENAME);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setImage(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ModuleBody() throws ParseException {
                     /*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_BRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UI:
        Ui();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LOGIC:
        Logic();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOMAIN:
        Domain();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Ui() throws ParseException {
 /*@bgen(jjtree) Ui */
  ASTUi jjtn000 = new ASTUi(JJTUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(UI);
      jj_consume_token(OPEN_BRACKET);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCREEN:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
        Screen();
      }
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Screen() throws ParseException {
 /*@bgen(jjtree) Screen */
  ASTScreen jjtn000 = new ASTScreen(JJTSCREEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SCREEN);
      ScreenName();
      jj_consume_token(OPEN_BRACKET);
      MvcArea();
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ScreenName() throws ParseException {
 /*@bgen(jjtree) ScreenName */
  ASTScreenName jjtn000 = new ASTScreenName(JJTSCREENNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NAME);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Model() throws ParseException {
 /*@bgen(jjtree) Model */
  ASTModel jjtn000 = new ASTModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MODEL);
      GenericBlock();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void Controller() throws ParseException {
                    /*@bgen(jjtree) Controller */
  ASTController jjtn000 = new ASTController(JJTCONTROLLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTROLLER);
      GenericBlock();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GenericBlock() throws ParseException {
 /*@bgen(jjtree) GenericBlock */
  ASTGenericBlock jjtn000 = new ASTGenericBlock(JJTGENERICBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_BRACKET);
         token_source.SwitchTo(JsContentState);
         nestingLvl++;
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPEN_BRACKET:
        case ANY_NON_OPEN_CLOSE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ANY_NON_OPEN_CLOSE:
          jj_consume_token(ANY_NON_OPEN_CLOSE);
          break;
        case OPEN_BRACKET:
          GenericBlock();
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CLOSE_BRACKET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    nestingLvl--;
    if ( nestingLvl == 0 )
    {
      token_source.SwitchTo(DEFAULT);
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void MvcArea() throws ParseException {
                  /*@bgen(jjtree) MvcArea */
  ASTMvcArea jjtn000 = new ASTMvcArea(JJTMVCAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MODEL:
        Model();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONTROLLER:
        Controller();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INPUT:
        case INPUT_AREA:
        case INPUT_FILE:
        case CHECKBOX:
        case SELECTBOX:
        case TEXT:
        case RADIO:
        case RADIOS:
        case BUTTON:
        case BUTTONGROUP:
        case IMG:
        case VERTICAL_LAYOUT:
        case HORIZONTAL_LAYOUT:
        case HORIZONTAL_FORM:
        case SECTION:
        case NO_LABEL_FLAG:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INPUT:
        case NO_LABEL_FLAG:
          Input();
          break;
        case INPUT_FILE:
          InputFile();
          break;
        case INPUT_AREA:
          InputArea();
          break;
        case CHECKBOX:
          Checkbox();
          break;
        case SELECTBOX:
          Selectbox();
          break;
        case TEXT:
          Text();
          break;
        case RADIO:
          Radio();
          break;
        case RADIOS:
          Radios();
          break;
        case IMG:
          Img();
          break;
        case BUTTON:
          Button();
          break;
        case BUTTONGROUP:
          ButtonGroup();
          break;
        case VERTICAL_LAYOUT:
          VerticalLayout();
          break;
        case HORIZONTAL_LAYOUT:
          HorizontalLayout();
          break;
        case HORIZONTAL_FORM:
          HorizontalForm();
          break;
        case SECTION:
          Section();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public ASTVerticalLayout VerticalLayout() throws ParseException {
                                      /*@bgen(jjtree) VerticalLayout */
  ASTVerticalLayout jjtn000 = new ASTVerticalLayout(JJTVERTICALLAYOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VERTICAL_LAYOUT);
      StdLayoutDescription();
      jj_consume_token(OPEN_BRACKET);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROW:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        LayoutRow();
      }
      jj_consume_token(CLOSE_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTHorizontalLayout HorizontalLayout() throws ParseException {
 /*@bgen(jjtree) HorizontalLayout */
  ASTHorizontalLayout jjtn000 = new ASTHorizontalLayout(JJTHORIZONTALLAYOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);ASTLayoutColumn n = null;
  int noOfColumns = 0;
    try {
      jj_consume_token(HORIZONTAL_LAYOUT);
      StdLayoutDescription();
      jj_consume_token(OPEN_BRACKET);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLUMN:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        n = LayoutColumn();
                  noOfColumns = noOfColumns + n.getColSpan();
      }
      jj_consume_token(CLOSE_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          if ( noOfColumns > 12 )
          {
                {if (true) throw new ParseException("An horizontal_layout() cannot have more than 12 columns");}
          }
           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTLayoutColumn LayoutColumn() throws ParseException {
 /*@bgen(jjtree) LayoutColumn */
  ASTLayoutColumn jjtn000 = new ASTLayoutColumn(JJTLAYOUTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int colSpan = 0 ;
    try {
      jj_consume_token(COLUMN);
      colSpan = ColumnDescription();
      jj_consume_token(OPEN_BRACKET);
      MvcArea();
      jj_consume_token(CLOSE_BRACKET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
           jjtn000.setColSpan(colSpan);
           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public int ColumnDescription() throws ParseException {
 /*@bgen(jjtree) ColumnDescription */
  ASTColumnDescription jjtn000 = new ASTColumnDescription(JJTCOLUMNDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(OPEN_R_BRACKET);
                       token_source.SwitchTo(InputDescriptionState);
      t = jj_consume_token(NUMBER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        CssStyle();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                        token_source.SwitchTo(DEFAULT) ;
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setImage(t.image);
    {if (true) return Integer.parseInt(t.image);}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTHorizontalForm HorizontalForm() throws ParseException {
                                      /*@bgen(jjtree) HorizontalForm */
  ASTHorizontalForm jjtn000 = new ASTHorizontalForm(JJTHORIZONTALFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(HORIZONTAL_FORM);
      StdLayoutDescription();
      jj_consume_token(OPEN_BRACKET);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ROW:
        case NO_LABEL_FLAG:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
        HorizontalFormRow();
      }
      jj_consume_token(CLOSE_BRACKET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTHorizontalFormRow HorizontalFormRow() throws ParseException {
                                            /*@bgen(jjtree) HorizontalFormRow */
  ASTHorizontalFormRow jjtn000 = new ASTHorizontalFormRow(JJTHORIZONTALFORMROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NO_LABEL_FLAG:
        jj_consume_token(NO_LABEL_FLAG);
                               jjtn000.setNoLabelRendering();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(ROW);
      StdLayoutDescription();
      jj_consume_token(OPEN_BRACKET);
      MvcArea();
      jj_consume_token(CLOSE_BRACKET);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTLayoutRow LayoutRow() throws ParseException {
                            /*@bgen(jjtree) LayoutRow */
  ASTLayoutRow jjtn000 = new ASTLayoutRow(JJTLAYOUTROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ROW);
      StdLayoutDescription();
      jj_consume_token(OPEN_BRACKET);
      MvcArea();
      jj_consume_token(CLOSE_BRACKET);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTSection Section() throws ParseException {
                        /*@bgen(jjtree) Section */
                        ASTSection jjtn000 = new ASTSection(JJTSECTION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(SECTION);
      StdInputDescription();
      jj_consume_token(OPEN_BRACKET);
      MvcArea();
      jj_consume_token(CLOSE_BRACKET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInput Input() throws ParseException {
                    /*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NO_LABEL_FLAG:
        jj_consume_token(NO_LABEL_FLAG);
                      jjtn000.setNoLabelRendering();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(INPUT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        StdInputDescription();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                               jjtc000 = false;
                                                                                                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInputFile InputFile() throws ParseException {
                            /*@bgen(jjtree) InputFile */
  ASTInputFile jjtn000 = new ASTInputFile(JJTINPUTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INPUT_FILE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        StdInputDescription();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTInputArea InputArea() throws ParseException {
                           /*@bgen(jjtree) InputArea */
  ASTInputArea jjtn000 = new ASTInputArea(JJTINPUTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INPUT_AREA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        StdInputDescription();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                             {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTCheckbox Checkbox() throws ParseException {
                         /*@bgen(jjtree) Checkbox */
  ASTCheckbox jjtn000 = new ASTCheckbox(JJTCHECKBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CHECKBOX);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        StdInputDescription();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTSelectbox Selectbox() throws ParseException {
                            /*@bgen(jjtree) Selectbox */
  ASTSelectbox jjtn000 = new ASTSelectbox(JJTSELECTBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECTBOX);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        SelectInputDescription();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_BRACKET:
        SelectboxOptions();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTRadio Radio() throws ParseException {
                   /*@bgen(jjtree) Radio */
  ASTRadio jjtn000 = new ASTRadio(JJTRADIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RADIO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        RadioInputDescription();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                        {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTRadios Radios() throws ParseException {
                     /*@bgen(jjtree) Radios */
  ASTRadios jjtn000 = new ASTRadios(JJTRADIOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RADIOS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        RadiosInputDescription();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                           {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTText Text() throws ParseException {
                 /*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TEXT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        StdInputDescription();
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTLabel Label() throws ParseException {
                    /*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LABEL);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             {if (true) return jjtn000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTImg Img() throws ParseException {
               /*@bgen(jjtree) Img */
  ASTImg jjtn000 = new ASTImg(JJTIMG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IMG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        StdInputDescription();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ButtonGroup() throws ParseException {
                      /*@bgen(jjtree) ButtonGroup */
  ASTButtonGroup jjtn000 = new ASTButtonGroup(JJTBUTTONGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BUTTONGROUP);
      jj_consume_token(OPEN_BRACKET);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BUTTON:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_8;
        }
        Button();
      }
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  final public ASTButton Button() throws ParseException {
                      /*@bgen(jjtree) Button */
  ASTButton jjtn000 = new ASTButton(JJTBUTTON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BUTTON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPEN_R_BRACKET:
        ButtonDescription();
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ButtonDescription() throws ParseException {
                            /*@bgen(jjtree) ButtonDescription */
  ASTButtonDescription jjtn000 = new ASTButtonDescription(JJTBUTTONDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_R_BRACKET);
                             token_source.SwitchTo(InputDescriptionState);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        ButtonAction();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          CssStyle();
          break;
        default:
          jj_la1[29] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              token_source.SwitchTo(DEFAULT);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ButtonAction() throws ParseException {
                       /*@bgen(jjtree) ButtonAction */
                       ASTButtonAction jjtn000 = new ASTButtonAction(JJTBUTTONACTION);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t; String param ;StringBuffer s = new StringBuffer();
    try {
      t = jj_consume_token(VARIABLE);
                    s.append(t.image);
      t = jj_consume_token(OPEN_R_BRACKET);
                        s.append(t.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
        param = ButtonActionParameter();
                                     s.append(param);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_9;
          }
          t = jj_consume_token(COMMA);
                    s.append(t.image);
          param = ButtonActionParameter();
                                    s.append(" " + param);
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      t = jj_consume_token(CLOSE_R_BRACKET);
                           s.append(t.image);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setImage(s.toString());
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String ButtonActionParameter() throws ParseException {
                                  /*@bgen(jjtree) ButtonActionParameter */
                                  ASTButtonActionParameter jjtn000 = new ASTButtonActionParameter(JJTBUTTONACTIONPARAMETER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t; StringBuffer s = new StringBuffer();
    try {
      t = jj_consume_token(VARIABLE);
                        s.append(t.image);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DOT:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_10;
        }
        t = jj_consume_token(DOT);
                       s.append(t.image);
        t = jj_consume_token(VARIABLE);
                          s.append(t.image);
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        {if (true) return s.toString();}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ModelVariable() throws ParseException {
 /*@bgen(jjtree) ModelVariable */
  ASTModelVariable jjtn000 = new ASTModelVariable(JJTMODELVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);StringBuffer s = new StringBuffer();
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LITERAL:
        t = jj_consume_token(LITERAL);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     s.append(t.image.replace("\u005c"","").replace("'","")); jjtn000.setLiteral(true); jjtn000.setImage(s.toString());
        break;
      case VARIABLE:
        t = jj_consume_token(VARIABLE);
                          s.append(t.image);
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DOT:
            ;
            break;
          default:
            jj_la1[34] = jj_gen;
            break label_11;
          }
          t = jj_consume_token(DOT);
                            s.append(t.image);
          t = jj_consume_token(VARIABLE);
                                 s.append(t.image);
        }
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
         jjtn000.setImage(s.toString());
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void StdLayoutDescription() throws ParseException {
                              /*@bgen(jjtree) StdLayoutDescription */
  ASTStdLayoutDescription jjtn000 = new ASTStdLayoutDescription(JJTSTDLAYOUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_R_BRACKET);
                             token_source.SwitchTo(InputDescriptionState);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DESC_QUOTE:
        CssStyle();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                              token_source.SwitchTo(DEFAULT) ;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void RadioInputDescription() throws ParseException {
                                /*@bgen(jjtree) RadioInputDescription */
  ASTRadioInputDescription jjtn000 = new ASTRadioInputDescription(JJTRADIOINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_R_BRACKET);
                                     token_source.SwitchTo(InputDescriptionState);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case LITERAL:
        ModelVariable();
        jj_consume_token(COMMA);
        ModelVariable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          CssStyle();
          break;
        default:
          jj_la1[37] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      token_source.SwitchTo(DEFAULT) ;
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void RadiosInputDescription() throws ParseException {
                                 /*@bgen(jjtree) RadiosInputDescription */
  ASTRadiosInputDescription jjtn000 = new ASTRadiosInputDescription(JJTRADIOSINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_R_BRACKET);
                                     token_source.SwitchTo(InputDescriptionState);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case LITERAL:
        ModelVariable();
        jj_consume_token(COMMA);
        ModelVariable();
        jj_consume_token(COMMA);
        ModelVariable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          CssStyle();
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      token_source.SwitchTo(DEFAULT) ;
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void SelectInputDescription() throws ParseException {
                                 /*@bgen(jjtree) SelectInputDescription */
  ASTSelectInputDescription jjtn000 = new ASTSelectInputDescription(JJTSELECTINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_R_BRACKET);
                                     token_source.SwitchTo(InputDescriptionState);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case LITERAL:
        ModelVariable();
        jj_consume_token(COMMA);
        ModelVariable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          CssStyle();
          break;
        default:
          jj_la1[41] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                      token_source.SwitchTo(DEFAULT) ;
    } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void SelectboxOptions() throws ParseException {
                           /*@bgen(jjtree) SelectboxOptions */
  ASTSelectboxOptions jjtn000 = new ASTSelectboxOptions(JJTSELECTBOXOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_BRACKET);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECTOPTION:
        case SELECTOPTIONGROUP:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_12;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECTOPTION:
          SelectOption();
          break;
        case SELECTOPTIONGROUP:
          SelectOptionGroup();
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectOption() throws ParseException {
                       /*@bgen(jjtree) SelectOption */
  ASTSelectOption jjtn000 = new ASTSelectOption(JJTSELECTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECTOPTION);
      RadiosInputDescription();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void SelectOptionGroup() throws ParseException {
                            /*@bgen(jjtree) SelectOptionGroup */
  ASTSelectOptionGroup jjtn000 = new ASTSelectOptionGroup(JJTSELECTOPTIONGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SELECTOPTIONGROUP);
      StdInputDescription();
      jj_consume_token(OPEN_BRACKET);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SELECTOPTION:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_13;
        }
        SelectOption();
      }
      jj_consume_token(CLOSE_BRACKET);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void StdInputDescription() throws ParseException {
                             /*@bgen(jjtree) StdInputDescription */
  ASTStdInputDescription jjtn000 = new ASTStdInputDescription(JJTSTDINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(OPEN_R_BRACKET);
                       token_source.SwitchTo(InputDescriptionState);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE:
      case LITERAL:
        ModelVariable();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          jj_consume_token(COMMA);
          CssStyle();
          break;
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      jj_consume_token(CLOSE_R_BRACKET);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        token_source.SwitchTo(DEFAULT) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CssStyle() throws ParseException {
                  /*@bgen(jjtree) CssStyle */
  ASTCssStyle jjtn000 = new ASTCssStyle(JJTCSSSTYLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DESC_QUOTE);
                   token_source.SwitchTo(CssStyleState);
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STYLE_CLASS:
        case ASTERISK:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_14;
        }
        if (jj_2_1(2147483647)) {
          CssClassName();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case STYLE_CLASS:
          case ASTERISK:
            CssInlineStyle();
            break;
          default:
            jj_la1[49] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(CLOSE_QUOTE);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     token_source.SwitchTo(InputDescriptionState);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CssClassName() throws ParseException {
                        /*@bgen(jjtree) CssClassName */
                        ASTCssClassName jjtn000 = new ASTCssClassName(JJTCSSCLASSNAME);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(STYLE_CLASS);
      jj_consume_token(SEMICOLON);
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
                jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void CssInlineStyle() throws ParseException {
                         /*@bgen(jjtree) CssInlineStyle */
                         ASTCssInlineStyle jjtn000 = new ASTCssInlineStyle(JJTCSSINLINESTYLE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);String t1 = null; String t2 = null;
    try {
      t1 = CssStyleName();
      jj_consume_token(COLON);
                    token_source.SwitchTo(CssStyleValueState);
      t2 = CssStyleValue();
                                token_source.SwitchTo(CssStyleState);
      jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setImage(t1 + ": "+t2);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String CssStyleName() throws ParseException {
                         /*@bgen(jjtree) CssStyleName */
                         ASTCssStyleName jjtn000 = new ASTCssStyleName(JJTCSSSTYLENAME);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASTERISK:
        jj_consume_token(ASTERISK);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
      t = jj_consume_token(STYLE_CLASS);
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                        {if (true) return t.image;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String CssStyleValue() throws ParseException {
                         /*@bgen(jjtree) CssStyleValue */
                         ASTCssStyleValue jjtn000 = new ASTCssStyleValue(JJTCSSSTYLEVALUE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      t = jj_consume_token(ANY_NO_SEMICOLON);
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                             {if (true) return t.image.trim();}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Logic() throws ParseException {
                /*@bgen(jjtree) Logic */
  ASTLogic jjtn000 = new ASTLogic(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LOGIC);
      jj_consume_token(OPEN_BRACKET);
      jj_consume_token(CLOSE_BRACKET);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Domain() throws ParseException {
                 /*@bgen(jjtree) Domain */
  ASTDomain jjtn000 = new ASTDomain(JJTDOMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DOMAIN);
      jj_consume_token(OPEN_BRACKET);
                     token_source.SwitchTo(DomainState);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENUM:
        case CLS_NAME:
          ;
          break;
        default:
          jj_la1[51] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ENUM:
          Enum();
          break;
        case CLS_NAME:
          Entity();
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(CLOSE_BRACKET);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        token_source.SwitchTo(DEFAULT) ;
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Enum() throws ParseException {
               /*@bgen(jjtree) Enum */
                ASTEnum jjtn000 = new ASTEnum(JJTENUM);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(ENUM);
      t = jj_consume_token(CLS_NAME);
      jj_consume_token(OPEN_BRACKET);
      EnumLiteral();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATOR:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_16;
        }
        jj_consume_token(SEPARATOR);
        EnumLiteral();
      }
      jj_consume_token(CLOSE_BRACKET);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setImage(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EnumLiteral() throws ParseException {
                      /*@bgen(jjtree) EnumLiteral */
                       ASTEnumLiteral jjtn000 = new ASTEnumLiteral(JJTENUMLITERAL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CLS_NAME);
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                           jjtn000.setImage(t.image);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public ASTEntity Entity() throws ParseException {
                      /*@bgen(jjtree) Entity */
                       ASTEntity jjtn000 = new ASTEntity(JJTENTITY);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CLS_NAME);
      jj_consume_token(OPEN_BRACKET);
      Property();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATOR:
          ;
          break;
        default:
          jj_la1[54] = jj_gen;
          break label_17;
        }
        jj_consume_token(SEPARATOR);
        Property();
      }
      jj_consume_token(CLOSE_BRACKET);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.setImage(t.image); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Property() throws ParseException {
                  /*@bgen(jjtree) Property */
                  ASTProperty jjtn000 = new ASTProperty(JJTPROPERTY);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t1; Token t2;
    try {
      t1 = jj_consume_token(CLS_NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATE:
        t2 = jj_consume_token(DATE);
        break;
      case STRING:
        t2 = jj_consume_token(STRING);
        break;
      case NR:
        t2 = jj_consume_token(NR);
        break;
      case BLOB:
        t2 = jj_consume_token(BLOB);
        break;
      case ONE_TO_MANY:
        t2 = jj_consume_token(ONE_TO_MANY);
                                 jjtn000.setMarkedAsOneToMany(true);
        break;
      case CLS_NAME:
        t2 = jj_consume_token(CLS_NAME);
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ONE_TO_ONE:
      case MANY_TO_ONE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONE_TO_ONE:
          jj_consume_token(ONE_TO_ONE);
                     jjtn000.setMarkedAsOneToOne(true);
          break;
        case MANY_TO_ONE:
          jj_consume_token(MANY_TO_ONE);
                      jjtn000.setMarkedAsManyToOne(true);
          break;
        default:
          jj_la1[56] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
        jjtn000.setName(t1.image);
        jjtn000.setType(t2.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(STYLE_CLASS)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SWLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x1000000,0x200000,0x100000,0x400000,0x80,0x80,0x4000000,0x2000000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x200,0x200,0x80,0x200,0x200,0x200,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x97fa7,0x97fa7,0x20000,0x40000,0x1000000,0xa0000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x1000000,0x800000,0x1000000,0x800000,0x2000000,0x2000000,0x4800000,0x8000000,0x1000000,0x4800000,0x1000000,0x4800000,0x1000000,0x4800000,0x18,0x18,0x8,0x1000000,0x4800000,0x90000000,0x90000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x404,0x404,0x800,0x800,0x678,0x3000,0x3000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SWL(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SWL(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SWLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SWL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SWLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SWL(SWLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SWLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[78];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 78; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
