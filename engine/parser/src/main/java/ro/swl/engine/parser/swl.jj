/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. swl.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
             
  KEEP_LINE_COLUMN = false;
  static = false;
                                                    

 // DEBUG_PARSER=true;
 // DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(SWL)
package ro.swl.engine.parser;

public class SWL/*@bgen(jjtree)*/implements SWLTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTSWLState jjtree = new JJTSWLState();

/*@egen*/

  private int nestingLvl = 0;

 	public static ASTSwdlApp  parse( java.io.File f) throws ParseException, java.io.FileNotFoundException {
		java.io.FileInputStream fStr = new java.io.FileInputStream(f);
		SWL parser = new SWL(fStr);
		return parser.SwdlApp();
	}
}

PARSER_END(SWL)

<*> SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}
<*> TOKEN :
{
  <OPEN_BRACKET: "{" >
| <CLOSE_BRACKET: "}" >
| < OPEN_R_BRACKET: "(" >
| < CLOSE_R_BRACKET: ")" >
| < OPEN_S_BRACKET: "[" >
| < CLOSE_S_BRACKET: "]" >
}

<DEFAULT> TOKEN :
{
  <#ALPHA_CHAR: [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff"
      ] >
| <#NUM_CHAR:   [
       "0"-"9"
      ] >
| <#ALPHANUM_CHAR: ( <ALPHA_CHAR> | <NUM_CHAR> ) >
| <#IDENTIFIER_CHAR: ( <ALPHANUM_CHAR> | [ "_", "-" ] ) >
| <#QUOTE:      ( "'" | "\"" )>
| < APP_NAME : "name">
| < MODULE: "module"  > 
| < DOMAIN: "domain" >
| < LOGIC: "logic" >
| < SCREEN : "screen"> 
| < UI : "ui" > 
| < CONTROLLER: "controller" >
| < MODEL: "model" > 
| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| < QUOTED_IDENTIFIER: < QUOTE > <IDENTIFIER > < QUOTE >>
| < QUOTED_TEXT: < QUOTE > (~["\"","'"])* < QUOTE >>

// Model components

| < INPUT: "input" >
| < INPUT_AREA: "input_area" >
| < INPUT_FILE: "input_file" >
| < CHECKBOX: "checkbox" >
| < SELECTBOX: "selectbox" >
| < SELECTOPTION: "selectoption" >
| < SELECTOPTIONGROUP: "selectoptiongroup" >
| < TEXT: "text" >
| < LABEL: "label" >
| < RADIO: "radio" >
| < RADIOS: "radios" >
| < BUTTON: "button" >
| < BUTTONGROUP: "button_group" >
| < IMG: "img" >

// Layout Components

| < VERTICAL_LAYOUT: "vertical_layout" >
| < HORIZONTAL_LAYOUT: "horizontal_layout" >
| < HORIZONTAL_FORM: "horizontal_form" >
| < GROUP: "group" >
| < SECTION: "section" >
| < ROW: "row" >
| < COLUMN: "column" >
| < NO_LABEL_FLAG: "#" >
| < NAME: < IDENTIFIER >> 
}

< JsContentState > TOKEN:
{
  < ANY_NON_OPEN_CLOSE: (~["{","}"])+ >
}


< InputDescriptionState > TOKEN:
{
  < NUMBER : < NUM_CHAR > (< NUM_CHAR >)? >
| < VARIABLE : < IDENTIFIER >>
| < COMMA : "," >
| < DOT: "." >
| < LITERAL: ("\"" (~["\"",";"])* "\"") | ("'" (~["'",";"])* "'") >
| < DESC_QUOTE :< QUOTE >>
}

< CssStyleState > TOKEN :
{
  < STYLE_CLASS : < IDENTIFIER >>
| < COLON : ":" >
| < SEMICOLON : ";" >
| < ASTERISK : "*" >
| < CLOSE_QUOTE :< QUOTE >>
}

< CssStyleValueState > TOKEN :
{
  < ANY_NO_SEMICOLON : (~[";"])+ >
}

< DomainState > TOKEN :
{
  < ENUM:   "enum" >
| < PRIMITIVE: "Date" | "String" | "int" | "Integer" |"Double" | "double" | "long" | "Long" | "Blob" >
| < COLLECTION: "Set" | "List" >
| < CLS_NAME : < IDENTIFIER >>
| < INDICATOR : "->" >
| < SEPARATOR : "," >
| < MANY_MARKER : "*" >
| < OPEN_ANGLE: "<" >
| < CLOSE_ANGLE: ">" >
}


< LogicState > TOKEN :
{
	< CRUD : "crud" >
| 	< SEARCHER : "searcher" >
|   < SERVICE : "service" >
| 	< S_PRIMITIVE: "Date" | "String" | "int" | "Integer" |"Double" | "double" | "long" | "Long" | "Blob" >
| 	< S_COLLECTION: "Set" | "List" >
|   < VOID : "void" >
|   < S_COMMA : "," >
|   < EXT_IF_REST : "rest" >
|   < EXT_IF_FORM : "form" >
|   < EXT_IF_FILE : "file" >
|   < EXT_IF_WS : 	"ws" >
|   < EXT_IF_EMAIL: "email" >
|   < INTERFACE : "interface" >
|   < EXCHANGE : "exchange" >
|   < E_MODEL : "model" >
|   < EXTERNAL : "external" >
|   < S_NAME : < NAME >>
|   < S_QUOTED_TEXT: < QUOTE > (~["\"","'"])* < QUOTE >>
| 	< S_OPEN_ANGLE: "<" >
| 	< S_CLOSE_ANGLE: ">" >
}





/** ******************************************************************** */
/** *************************  SWL GRAMMAR  **************************** */
/** ******************************************************************** */

ASTSwdlApp SwdlApp() :
{/*@bgen(jjtree) SwdlApp */
  ASTSwdlApp jjtn000 = new ASTSwdlApp(JJTSWDLAPP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SwdlApp */
  try {
/*@egen*/
  NameDecl() ( Module() )+ <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void NameDecl() :{/*@bgen(jjtree) NameDecl */
  ASTNameDecl jjtn000 = new ASTNameDecl(JJTNAMEDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NameDecl */
        try {
/*@egen*/
  	< APP_NAME > 
 	AppName()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AppName(): {/*@bgen(jjtree) AppName */
                 ASTAppName jjtn000 = new ASTAppName(JJTAPPNAME);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AppName */
  try {
/*@egen*/
  t = < QUOTED_IDENTIFIER >/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
 	jjtn000.setImageWithoutQuote(t.image);
 }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Module() : {/*@bgen(jjtree) Module */
  ASTModule jjtn000 = new ASTModule(JJTMODULE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/
  < MODULE >
  ModuleName()
  ModuleBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ModuleName() : {/*@bgen(jjtree) ModuleName */
                     ASTModuleName jjtn000 = new ASTModuleName(JJTMODULENAME);
                     boolean jjtc000 = true;
                     jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ModuleName */
  try {
/*@egen*/
  t = < NAME >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.setImage(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ModuleBody() : {/*@bgen(jjtree) ModuleBody */
  ASTModuleBody jjtn000 = new ASTModuleBody(JJTMODULEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ModuleBody */
        try {
/*@egen*/
	< OPEN_BRACKET >
	  ( Ui () )?
	  (Logic())?
	  (Domain() )?
	 < CLOSE_BRACKET >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Ui() :
{/*@bgen(jjtree) Ui */
  ASTUi jjtn000 = new ASTUi(JJTUI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Ui */
  try {
/*@egen*/
  < UI >
  < OPEN_BRACKET >
   ( Screen() )*
 < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void Screen() :
{/*@bgen(jjtree) Screen */
  ASTScreen jjtn000 = new ASTScreen(JJTSCREEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Screen */
  try {
/*@egen*/
  < SCREEN >
  ScreenName()
  < OPEN_BRACKET >
 	MvcArea()
 < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}

void ScreenName() :
{/*@bgen(jjtree) ScreenName */
  ASTScreenName jjtn000 = new ASTScreenName(JJTSCREENNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ScreenName */
  try {
/*@egen*/
  t= < NAME >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Model() : {/*@bgen(jjtree) Model */
  ASTModel jjtn000 = new ASTModel(JJTMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Model */
   try {
/*@egen*/
   < MODEL >
  GenericBlock(DEFAULT)/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Controller() :{/*@bgen(jjtree) Controller */
  ASTController jjtn000 = new ASTController(JJTCONTROLLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Controller */
  try {
/*@egen*/
  < CONTROLLER >
  GenericBlock(DEFAULT)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void GenericBlock(int switchBackState) :
{/*@bgen(jjtree) GenericBlock */
  ASTGenericBlock jjtn000 = new ASTGenericBlock(JJTGENERICBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) GenericBlock */
  try {
/*@egen*/
  < OPEN_BRACKET>
  	{
  	 token_source.SwitchTo(JsContentState);
  	 nestingLvl++;
  	}
  (< ANY_NON_OPEN_CLOSE > | GenericBlock(switchBackState))*
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    nestingLvl--;
    if ( nestingLvl == 0 )
    {
      token_source.SwitchTo(switchBackState);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MvcArea() : {/*@bgen(jjtree) MvcArea */
  ASTMvcArea jjtn000 = new ASTMvcArea(JJTMVCAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MvcArea */
   try {
/*@egen*/
   (Model())?
  (Controller())?
  (
	  Input()
	| InputFile()
	| InputArea()
	| Checkbox()
	| Selectbox()
	| Text()
	| Radio()
	| Radios()
	| Img()
	| Button()
	| ButtonGroup()
	// layout components
	| VerticalLayout()
	| HorizontalLayout()
	| HorizontalForm()
	| Section() 
	)*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}


ASTVerticalLayout VerticalLayout() : {/*@bgen(jjtree) VerticalLayout */
  ASTVerticalLayout jjtn000 = new ASTVerticalLayout(JJTVERTICALLAYOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VerticalLayout */
    try {
/*@egen*/
    < VERTICAL_LAYOUT >
   	StdLayoutDescription()
  	< OPEN_BRACKET >
  		(Model())?
  		(Controller())?	
  		( LayoutRow())*
  	< CLOSE_BRACKET >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{
  	  return jjtn000;
  	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

ASTHorizontalLayout HorizontalLayout() :
{/*@bgen(jjtree) HorizontalLayout */
  ASTHorizontalLayout jjtn000 = new ASTHorizontalLayout(JJTHORIZONTALLAYOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  ASTLayoutColumn n = null;
  int noOfColumns = 0;
}
{/*@bgen(jjtree) HorizontalLayout */
        try {
/*@egen*/
  	< HORIZONTAL_LAYOUT >
  	StdLayoutDescription()	
  	< OPEN_BRACKET >
  		( n =  LayoutColumn()
  		{
		  noOfColumns = noOfColumns + n.getColSpan();
  		})*
  		
  	< CLOSE_BRACKET >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{
  	  if ( noOfColumns > 12 )
  	  {
		throw new ParseException("An horizontal_layout() cannot have more than 12 columns");
  	  }
  	   return jjtn000;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

ASTLayoutColumn LayoutColumn() :
{/*@bgen(jjtree) LayoutColumn */
  ASTLayoutColumn jjtn000 = new ASTLayoutColumn(JJTLAYOUTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  int colSpan = 0 ;
}
{/*@bgen(jjtree) LayoutColumn */
        try {
/*@egen*/
	< COLUMN >
	colSpan = ColumnDescription()
	< OPEN_BRACKET >
  		MvcArea()
  	< CLOSE_BRACKET >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{
  	   jjtn000.setColSpan(colSpan);
  	   return jjtn000;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


int ColumnDescription() :
{/*@bgen(jjtree) ColumnDescription */
  ASTColumnDescription jjtn000 = new ASTColumnDescription(JJTCOLUMNDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t = null;
}
{/*@bgen(jjtree) ColumnDescription */
  try {
/*@egen*/
  < OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
	t = < NUMBER >
	( < COMMA >  CssStyle() )?
  < CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setImage(t.image);
    return Integer.parseInt(t.image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTHorizontalForm HorizontalForm() : {/*@bgen(jjtree) HorizontalForm */
  ASTHorizontalForm jjtn000 = new ASTHorizontalForm(JJTHORIZONTALFORM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HorizontalForm */
  try {
/*@egen*/
  < HORIZONTAL_FORM >
  StdLayoutDescription()
  < OPEN_BRACKET >
  		( HorizontalFormRow())*
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTHorizontalFormRow HorizontalFormRow() : {/*@bgen(jjtree) HorizontalFormRow */
  ASTHorizontalFormRow jjtn000 = new ASTHorizontalFormRow(JJTHORIZONTALFORMROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) HorizontalFormRow */
          try {
/*@egen*/
	  (< NO_LABEL_FLAG > { jjtn000.setNoLabelRendering(); } )?
	    < ROW >
	  	StdLayoutDescription()
	  < OPEN_BRACKET >
	  		MvcArea()
	  < CLOSE_BRACKET >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/
	   {
	    return jjtn000;
	  }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

ASTLayoutRow LayoutRow() : {/*@bgen(jjtree) LayoutRow */
  ASTLayoutRow jjtn000 = new ASTLayoutRow(JJTLAYOUTROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) LayoutRow */
  try {
/*@egen*/
  < ROW >
  	StdLayoutDescription()
  < OPEN_BRACKET >
  		MvcArea()
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTSection Section() : {/*@bgen(jjtree) Section */
                        ASTSection jjtn000 = new ASTSection(JJTSECTION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) Section */
  try {
/*@egen*/
  t = < SECTION >
   StdInputDescription()
  < OPEN_BRACKET >
  		MvcArea()
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTInput Input():  {/*@bgen(jjtree) Input */
  ASTInput jjtn000 = new ASTInput(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
 try {
/*@egen*/
 (< NO_LABEL_FLAG > { jjtn000.setNoLabelRendering(); } )? < INPUT > (StdInputDescription())?/*@bgen(jjtree)*/
                                                                                             {
                                                                                               jjtree.closeNodeScope(jjtn000, true);
                                                                                               jjtc000 = false;
                                                                                             }
/*@egen*/ {  return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}


ASTInputFile InputFile():  {/*@bgen(jjtree) InputFile */
  ASTInputFile jjtn000 = new ASTInputFile(JJTINPUTFILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InputFile */
 try {
/*@egen*/
 < INPUT_FILE > (StdInputDescription())?/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTInputArea InputArea(): {/*@bgen(jjtree) InputArea */
  ASTInputArea jjtn000 = new ASTInputArea(JJTINPUTAREA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InputArea */
 try {
/*@egen*/
 < INPUT_AREA >   (StdInputDescription())?/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTCheckbox Checkbox(): {/*@bgen(jjtree) Checkbox */
  ASTCheckbox jjtn000 = new ASTCheckbox(JJTCHECKBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Checkbox */
 try {
/*@egen*/
 < CHECKBOX > (StdInputDescription())?/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTSelectbox Selectbox():  {/*@bgen(jjtree) Selectbox */
  ASTSelectbox jjtn000 = new ASTSelectbox(JJTSELECTBOX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Selectbox */
 try {
/*@egen*/
 < SELECTBOX >  (SelectInputDescription())? (SelectboxOptions())?/*@bgen(jjtree)*/
                                                                  {
                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                    jjtc000 = false;
                                                                  }
/*@egen*/ {  return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTRadio Radio(): {/*@bgen(jjtree) Radio */
  ASTRadio jjtn000 = new ASTRadio(JJTRADIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Radio */
 try {
/*@egen*/
 < RADIO > (RadioInputDescription())?/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTRadios Radios(): {/*@bgen(jjtree) Radios */
  ASTRadios jjtn000 = new ASTRadios(JJTRADIOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Radios */
 try {
/*@egen*/
 < RADIOS >  (RadiosInputDescription())?/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTText Text(): {/*@bgen(jjtree) Text */
  ASTText jjtn000 = new ASTText(JJTTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Text */
 try {
/*@egen*/
 < TEXT > (StdInputDescription())?/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

ASTLabel Label() : {/*@bgen(jjtree) Label */
  ASTLabel jjtn000 = new ASTLabel(JJTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Label */
 try {
/*@egen*/
 < LABEL >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ { return jjtn000;}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

ASTImg Img(): {/*@bgen(jjtree) Img */
  ASTImg jjtn000 = new ASTImg(JJTIMG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Img */
 try {
/*@egen*/
 < IMG > (StdInputDescription())?/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void ButtonGroup() : {/*@bgen(jjtree) ButtonGroup */
  ASTButtonGroup jjtn000 = new ASTButtonGroup(JJTBUTTONGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ButtonGroup */
 try {
/*@egen*/
 < BUTTONGROUP > < OPEN_BRACKET > (Button())* < CLOSE_BRACKET >/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

ASTButton Button() : {/*@bgen(jjtree) Button */
  ASTButton jjtn000 = new ASTButton(JJTBUTTON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Button */
 try {
/*@egen*/
 < BUTTON > (ButtonDescription())?/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/ 
}

void ButtonDescription() : {/*@bgen(jjtree) ButtonDescription */
  ASTButtonDescription jjtn000 = new ASTButtonDescription(JJTBUTTONDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ButtonDescription */
        try {
/*@egen*/
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(
		  ButtonAction()
		  (< COMMA > CssStyle() )?
		)?
  	< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { token_source.SwitchTo(DEFAULT); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ButtonAction() : {/*@bgen(jjtree) ButtonAction */
                       ASTButtonAction jjtn000 = new ASTButtonAction(JJTBUTTONACTION);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; String param ;StringBuffer s = new StringBuffer();}
{/*@bgen(jjtree) ButtonAction */
  try {
/*@egen*/
  t = < VARIABLE >{ s.append(t.image);}
  t = <OPEN_R_BRACKET >{s.append(t.image);}
  ( param = ButtonActionParameter() {s.append(param);}
   ( t = < COMMA > {s.append(t.image);}
    param = ButtonActionParameter(){s.append(" " + param);}
   )*
  )?
  t = < CLOSE_R_BRACKET > {s.append(t.image);}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.setImage(s.toString());
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String ButtonActionParameter() : {/*@bgen(jjtree) ButtonActionParameter */
                                  ASTButtonActionParameter jjtn000 = new ASTButtonActionParameter(JJTBUTTONACTIONPARAMETER);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; StringBuffer s = new StringBuffer();}
{/*@bgen(jjtree) ButtonActionParameter */
        try {
/*@egen*/
	t = <VARIABLE >{s.append(t.image);}
  	(
  	  t = < DOT > {s.append(t.image);}
  	  t = <VARIABLE >{s.append(t.image);}
  	)*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	return s.toString();
  }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
 

void ModelVariable():
{/*@bgen(jjtree) ModelVariable */
  ASTModelVariable jjtn000 = new ASTModelVariable(JJTMODELVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  StringBuffer s = new StringBuffer();
  Token t;
}
{/*@bgen(jjtree) ModelVariable */
    try {
/*@egen*/
    t= < LITERAL >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {
                    char quote = '"';
                    s.append(t.image.replace(""+quote,"").replace("'",""));
                    jjtn000.setLiteral(true);
                    jjtn000.setImage(s.toString());
                    }
    |( t = < VARIABLE > { s.append(t.image); }
	      (
	       t= < DOT > { s.append(t.image); }
	       t = <VARIABLE > { s.append(t.image); }
	       )*
     )/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/ { jjtn000.setImage(s.toString());  }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void StdLayoutDescription(): {/*@bgen(jjtree) StdLayoutDescription */
  ASTStdLayoutDescription jjtn000 = new ASTStdLayoutDescription(JJTSTDLAYOUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StdLayoutDescription */
        try {
/*@egen*/
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(  CssStyle() )?
	< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void RadioInputDescription() : {/*@bgen(jjtree) RadioInputDescription */
  ASTRadioInputDescription jjtn000 = new ASTRadioInputDescription(JJTRADIOINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RadioInputDescription */
                try {
/*@egen*/
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		    ModelVariable() // model variable to bind to
		      < COMMA > ModelVariable() // value property 
			( < COMMA >  CssStyle() )?
		)?

		< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void RadiosInputDescription() : {/*@bgen(jjtree) RadiosInputDescription */
  ASTRadiosInputDescription jjtn000 = new ASTRadiosInputDescription(JJTRADIOSINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RadiosInputDescription */
                try {
/*@egen*/
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
 		(
		   ModelVariable() 			  // model variable to bind to
		   < COMMA > ModelVariable() // model values collection on which to iterate for the 'value' attribute of the radio
		   < COMMA > ModelVariable() // value property 
		 ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void SelectInputDescription() : {/*@bgen(jjtree) SelectInputDescription */
  ASTSelectInputDescription jjtn000 = new ASTSelectInputDescription(JJTSELECTINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectInputDescription */
                try {
/*@egen*/
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		   ModelVariable() 			 // model value to bind to
		   < COMMA > ModelVariable() // model value representing the options
		   ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}


void SelectboxOptions() : {/*@bgen(jjtree) SelectboxOptions */
  ASTSelectboxOptions jjtn000 = new ASTSelectboxOptions(JJTSELECTBOXOPTIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectboxOptions */
  try {
/*@egen*/
  < OPEN_BRACKET >
  
 (
     	SelectOption()
 |  SelectOptionGroup()
 )*

  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectOption() : {/*@bgen(jjtree) SelectOption */
  ASTSelectOption jjtn000 = new ASTSelectOption(JJTSELECTOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectOption */
   try {
/*@egen*/
   < SELECTOPTION > (RadioInputDescription())/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ // reuse the old production despite the bad name...
}


void SelectOptionGroup() : {/*@bgen(jjtree) SelectOptionGroup */
  ASTSelectOptionGroup jjtn000 = new ASTSelectOptionGroup(JJTSELECTOPTIONGROUP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SelectOptionGroup */
   try {
/*@egen*/
   < SELECTOPTIONGROUP > StdInputDescription() < OPEN_BRACKET > (SelectOption())* < CLOSE_BRACKET >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/ 	
}


void StdInputDescription(): {/*@bgen(jjtree) StdInputDescription */
  ASTStdInputDescription jjtn000 = new ASTStdInputDescription(JJTSTDINPUTDESCRIPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StdInputDescription */
  try {
/*@egen*/
  < OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
  
 	 (
 	   ModelVariable()  
 	   ( < COMMA >  CssStyle() )?
 	 )?
 	 
  < CLOSE_R_BRACKET >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void CssStyle(): {/*@bgen(jjtree) CssStyle */
  ASTCssStyle jjtn000 = new ASTCssStyle(JJTCSSSTYLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CssStyle */
  try {
/*@egen*/
  < DESC_QUOTE > { token_source.SwitchTo(CssStyleState); }

  (
    LOOKAHEAD(CssClassName())
   	CssClassName()
    |
  	CssInlineStyle()
  )*
 	 
  < CLOSE_QUOTE >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  { token_source.SwitchTo(InputDescriptionState); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CssClassName()  : {/*@bgen(jjtree) CssClassName */
                        ASTCssClassName jjtn000 = new ASTCssClassName(JJTCSSCLASSNAME);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CssClassName */
        try {
/*@egen*/
	t = < STYLE_CLASS >  < SEMICOLON >/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/
	 {
		jjtn000.setImage(t.image); 
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void CssInlineStyle() : {/*@bgen(jjtree) CssInlineStyle */
                         ASTCssInlineStyle jjtn000 = new ASTCssInlineStyle(JJTCSSINLINESTYLE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/String t1 = null; String t2 = null;}
{/*@bgen(jjtree) CssInlineStyle */
    try {
/*@egen*/
    t1 =  CssStyleName()
 	 < COLON > {token_source.SwitchTo(CssStyleValueState);}
 	t2 =  CssStyleValue()  {token_source.SwitchTo(CssStyleState);}
 	 < SEMICOLON >/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{
		jjtn000.setImage(t1 + ": "+t2); 
	}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


String CssStyleName():  {/*@bgen(jjtree) CssStyleName */
                         ASTCssStyleName jjtn000 = new ASTCssStyleName(JJTCSSSTYLENAME);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CssStyleName */
  try {
/*@egen*/
  (< ASTERISK >)? t = < STYLE_CLASS >/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

String CssStyleValue(): {/*@bgen(jjtree) CssStyleValue */
                         ASTCssStyleValue jjtn000 = new ASTCssStyleValue(JJTCSSSTYLEVALUE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) CssStyleValue */
  try {
/*@egen*/
  t = <ANY_NO_SEMICOLON >/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ {  return t.image.trim();  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}




ASTLogic Logic() : {/*@bgen(jjtree) Logic */
  ASTLogic jjtn000 = new ASTLogic(JJTLOGIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Logic */
  try {
/*@egen*/
  < LOGIC >
  < OPEN_BRACKET > { token_source.SwitchTo(LogicState); }
   	( 
   	  ExternalInterface() | Service()
   	)*
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/  { token_source.SwitchTo(DEFAULT); return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExternalInterface() : {/*@bgen(jjtree) ExternalInterface */
                            ASTExternalInterface jjtn000 = new ASTExternalInterface(JJTEXTERNALINTERFACE);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t; Token t1;}
{/*@bgen(jjtree) ExternalInterface */
        try {
/*@egen*/
	< EXTERNAL >
	( t = < EXT_IF_REST > |  t = < EXT_IF_FORM > |  t = < EXT_IF_FILE > |  t =  < EXT_IF_WS > |  t = < EXT_IF_EMAIL >	) { jjtn000.setType(t.image);}
	< INTERFACE >
	t1 = < S_NAME > {jjtn000.setName(t1.image);}
		< OPEN_BRACKET >
			( ExchangeModel() ) ?
			( ServiceActions() | Action() )*
		< CLOSE_BRACKET >/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                  }
/*@egen*/ { token_source.SwitchTo(LogicState); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExchangeModel() : {/*@bgen(jjtree) ExchangeModel */
  ASTExchangeModel jjtn000 = new ASTExchangeModel(JJTEXCHANGEMODEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ExchangeModel */
         try {
/*@egen*/
  	 < EXCHANGE > < E_MODEL >
  	 	< OPEN_BRACKET >  { token_source.SwitchTo(DomainState); }
  	 		( Entity() ) *
  	 	< CLOSE_BRACKET >/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/  { token_source.SwitchTo(LogicState); }/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void ServiceActions() : {/*@bgen(jjtree) ServiceActions */
                         ASTServiceActions jjtn000 = new ASTServiceActions(JJTSERVICEACTIONS);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ServiceActions */
  try {
/*@egen*/
  < SERVICE > t = < S_NAME > { jjtn000.setImage(t.image);}
  	< OPEN_BRACKET >
  	< CLOSE_BRACKET >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Service() : {/*@bgen(jjtree) Service */
                  ASTService jjtn000 = new ASTService(JJTSERVICE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Service */
  try {
/*@egen*/
  < SERVICE > t =  <S_NAME> { jjtn000.setImage(t.image);}
  < OPEN_BRACKET >
  	(
  	  Crud() | Action()
  	)* 
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Crud() : {/*@bgen(jjtree) Crud */
               ASTCrud jjtn000 = new ASTCrud(JJTCRUD);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Crud */
        try {
/*@egen*/
	< CRUD > t = <S_NAME>	{ jjtn000.setEntity(t.image);}
	< OPEN_BRACKET >
		(Searcher())*
	< CLOSE_BRACKET >/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Searcher() : {/*@bgen(jjtree) Searcher */
                   ASTSearcher jjtn000 = new ASTSearcher(JJTSEARCHER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2; Token t3;}
{/*@bgen(jjtree) Searcher */
        try {
/*@egen*/
	< SEARCHER >
	 t2 = <S_NAME> { jjtn000.setSearcherName(t2.image); }
	 < OPEN_BRACKET >
		 t3 = < S_QUOTED_TEXT >{jjtn000.setQuery(t3.image);}
	 < CLOSE_BRACKET >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Action() : {/*@bgen(jjtree) Action */
                 ASTAction jjtn000 = new ASTAction(JJTACTION);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2; ASTType type;  }
{/*@bgen(jjtree) Action */
         try {
/*@egen*/
  	
	 (
	   	  type = Type() { jjtn000.setReturnType(type);  }
	 	| < VOID >	  {jjtn000.setVoid(true);}
	 )
	 
	 
	t1 = < S_NAME > { jjtn000.setImageWithoutQuote(t1.image);}
	 < OPEN_R_BRACKET >
	 		[ ActionParam() ( < S_COMMA > ActionParam() )* ] 
	 < CLOSE_R_BRACKET > {  }
	 GenericBlock(LogicState)/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

ASTType Type() : {/*@bgen(jjtree) Type */
                  ASTType jjtn000 = new ASTType(JJTTYPE);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t2; Token t3 = null;}
{/*@bgen(jjtree) Type */
         try {
/*@egen*/
	 ( 
		t2 =  < S_PRIMITIVE > { jjtn000.setPrimitive(true);}
		|t2 =  < S_COLLECTION > <S_OPEN_ANGLE > t3 = < S_NAME > <S_CLOSE_ANGLE >  
		|t2 =  < S_NAME > 
	  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if ( t3 != null )
    {
   		jjtn000.setTypeName(t2.image+"<"+t3.image+">");
  	}
  	else
  	{
  	  	jjtn000.setTypeName(t2.image);
 	}
 	
    return jjtn000;
  }/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/ 
}

void ActionParam() : {/*@bgen(jjtree) ActionParam */
                       ASTActionParam jjtn000 = new ASTActionParam(JJTACTIONPARAM);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ ASTType t1; Token t2;}
{/*@bgen(jjtree) ActionParam */
        try {
/*@egen*/
	t1 = Type() {jjtn000.setType(t1);}
	t2 = < S_NAME >/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {jjtn000.setName(t2.image);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Domain() : {/*@bgen(jjtree) Domain */
  ASTDomain jjtn000 = new ASTDomain(JJTDOMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Domain */
  try {
/*@egen*/
  < DOMAIN >
  < OPEN_BRACKET > { token_source.SwitchTo(DomainState); }
  (
    Enum()
	|
	Entity()
  )*
   < CLOSE_BRACKET >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/  { token_source.SwitchTo(DEFAULT) ;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Enum() : {/*@bgen(jjtree) Enum */
                ASTEnum jjtn000 = new ASTEnum(JJTENUM);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Enum */
  try {
/*@egen*/
  < ENUM >  t = < CLS_NAME >
  < OPEN_BRACKET >
  		( EnumLiteral() )
  		(< SEPARATOR > EnumLiteral())*
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.setImage(t.image);  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EnumLiteral() : {/*@bgen(jjtree) EnumLiteral */
                       ASTEnumLiteral jjtn000 = new ASTEnumLiteral(JJTENUMLITERAL);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}  
{/*@bgen(jjtree) EnumLiteral */
        try {
/*@egen*/
	t = < CLS_NAME >/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.setImage(t.image);	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


ASTEntity Entity() : {/*@bgen(jjtree) Entity */
                       ASTEntity jjtn000 = new ASTEntity(JJTENTITY);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Entity */
  try {
/*@egen*/
  t = < CLS_NAME >
  < OPEN_BRACKET >
  	 ( Property() )
  	 ( < SEPARATOR > Property() )*
  < CLOSE_BRACKET >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{ jjtn000.setImage(t.image); return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Property() :{/*@bgen(jjtree) Property */
                  ASTProperty jjtn000 = new ASTProperty(JJTPROPERTY);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1; Token t2; Token t3 = null;Token t4 = null;Token t5 =null;}
{/*@bgen(jjtree) Property */
  try {
/*@egen*/
  t1 = < CLS_NAME >
  ( 
	t2 =  < PRIMITIVE > { jjtn000.setPrimitive(true);}
	|t2 =  < COLLECTION > <OPEN_ANGLE > t4 = < CLS_NAME > <CLOSE_ANGLE >  
	|t2 =  < CLS_NAME >
  )
  (
    < INDICATOR >
    (
       t3 = < CLS_NAME > | 	t5 = < MANY_MARKER > 
  	)
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
	jjtn000.setName(t1.image);
	jjtn000.setType(t2.image);
	if (t3 != null ) {
	    jjtn000.setRelatedPropertyName(t3.image);
	}

	if (t5 != null ) {
	  	jjtn000.setMarkedWithStar(true);
	}

	if ( t5 != null && t4 == null ){
	    jjtn000.setUnidirManyToOne(true);
	}

	if ( t5 != null && t4 != null ) {
		jjtn000.setUnidirManyToMany(true);
	}
	  
    if (t4 != null ){
    	jjtn000.setCollectionType(t4.image);
   }
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



  
