/* Generated By:JJTree: Do not edit this line. ASTProperty.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false
 * ,
 * NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package ro.swl.engine.parser;

import ro.swl.engine.generator.javaee.model.Relation;


public class ASTProperty extends SWLNode {

	private String name;

	private String type;

	private String collectionType;

	private String relatedPropertyName;

	private boolean unidirManyToOne;

	private boolean unidirManyToMany;

	private ASTProperty relatedField;

	private Relation relationType;

	private boolean owning;

	private boolean bidirectional;

	private boolean primitive;

	private boolean markedWithStar;



	public ASTProperty(int id) {
		super(id);
	}


	public String getName() {
		return name;
	}



	public void setName(String name) {
		this.name = name;
	}



	public String getType() {
		return type;
	}



	public void setType(String type) {
		this.type = type;
	}



	public String getRelatedPropertyName() {
		return relatedPropertyName;
	}



	public void setRelatedPropertyName(String relatedPropertyName) {
		this.relatedPropertyName = relatedPropertyName;
	}



	public boolean isCollection() {
		return collectionType != null;
	}



	public String getCollectionType() {
		return collectionType;
	}



	public void setCollectionType(String collectionType) {
		this.collectionType = collectionType;
	}


	public boolean isXToOne() {

		if (isCollection()) {
			return false;// in this case we have an x-to-many
		}

		if (relatedPropertyName == null) {
			return true;
		}

		// we have either a many-to-one or a one-to-one
		return true;

	}


	public boolean isXToMany() {
		return isCollection();
	}


	public boolean isUnidirOneToOne() {
		// field can be part of a relation specified in another field (specified by '->')
		if (isBidirectional())
			return false;

		return !isCollection() && (relatedPropertyName == null);
	}


	public boolean isUnidirOneToMany() {
		// field can be part of a relation specified in another field (specified by '->')
		if (isBidirectional())
			return false;

		if (isUnidirManyToMany())
			return false;

		return isCollection() && (relatedPropertyName == null);
	}


	public boolean isUnidirManyToOne() {
		// field can be part of a relation specified in another field (specified by '->')
		if (isBidirectional())
			return false;

		return this.unidirManyToOne;
	}


	public void setUnidirManyToOne(boolean unidirManyToOne) {
		this.unidirManyToOne = unidirManyToOne;
	}


	public void setUnidirManyToMany(boolean b) {
		this.unidirManyToMany = b;
	}


	public boolean isUnidirManyToMany() {
		return unidirManyToMany;
	}


	public boolean hasDeclaredRelatedField() {
		return relatedPropertyName != null;
	}



	public ASTProperty getRelatedField() {
		return relatedField;
	}


	public void setMarkedWithStar(boolean marked) {
		this.markedWithStar = marked;
	}


	public boolean isMarkedWithStar() {
		return this.markedWithStar;
	}


	public void setRelatedField(ASTProperty relatedField) {
		this.relatedField = relatedField;
	}



	public void setOwning(boolean b) {
		this.owning = b;
	}


	public boolean isOwning() {
		return owning;
	}


	public Relation getRelationType() {
		return relationType;
	}



	public void setRelationType(Relation relationType) {
		this.relationType = relationType;
	}


	public boolean hasRelation() {
		return relationType != null;
	}


	@Override
	public String toString() {
		if (!isCollection())
			return type + " " + name + " -> " + relatedPropertyName;
		else
			return type + "<" + collectionType + "> " + name + " -> " + relatedPropertyName;
	}


	public void setBidirectional(boolean b) {
		this.bidirectional = b;
	}



	public boolean isBidirectional() {
		return bidirectional;
	}


	public void setPrimitive(boolean b) {
		this.primitive = b;
	}


	public boolean isPrimitive() {
		return this.primitive;
	}

}
/*
 * JavaCC - OriginalChecksum=df6e5e061ca05073cb1da58c196fce0e (do not edit this
 * line)
 */