/* Generated By:JJTree&JavaCC: Do not edit this line. SWLTokenManager.java */
package ro.swl.engine.parser;

/** Token Manager. */
public class SWLTokenManager implements SWLConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffc7fc0000L) != 0L)
         {
            jjmatchedKind = 52;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x7ffffc6fc0000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 1;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0x5f7ffc6fc0000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x2080000000000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x5f7dfc6f80000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x2000040000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x81c1c4200000L) != 0L)
            return 1;
         if ((active0 & 0x5761e02d80000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 4;
            }
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x1701f82800000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 5;
            }
            return 1;
         }
         if ((active0 & 0x4070000580000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x1000000800000L) != 0L)
            return 1;
         if ((active0 & 0x741f82000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x200000000L) != 0L)
            return 1;
         if ((active0 & 0x741d82000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x400000000L) != 0L)
            return 1;
         if ((active0 & 0x741982000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x182000000L) != 0L)
            return 1;
         if ((active0 & 0x741800000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 9;
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x741800000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x700000000000L) != 0L)
         {
            if (jjmatchedPos != 11)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 11;
            }
            return 1;
         }
         if ((active0 & 0x41800000000L) != 0L)
            return 1;
         return -1;
      case 12:
         if ((active0 & 0x701000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x701000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x201000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 14;
            return 1;
         }
         if ((active0 & 0x500000000000L) != 0L)
            return 1;
         return -1;
      case 15:
         if ((active0 & 0x201000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 35:
         return jjStopAtPos(0, 51);
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 98:
         return jjMoveStringLiteralDfa1_5(0x60000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_5(0x4000202000000L);
      case 100:
         return jjMoveStringLiteralDfa1_5(0x100000L);
      case 103:
         return jjMoveStringLiteralDfa1_5(0x800000000000L);
      case 104:
         return jjMoveStringLiteralDfa1_5(0x600000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_5(0x801c0000000L);
      case 108:
         return jjMoveStringLiteralDfa1_5(0x4000200000L);
      case 109:
         return jjMoveStringLiteralDfa1_5(0x4080000L);
      case 110:
         return jjMoveStringLiteralDfa1_5(0x40000L);
      case 114:
         return jjMoveStringLiteralDfa1_5(0x2018000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_5(0x1001c00c00000L);
      case 116:
         return jjMoveStringLiteralDfa1_5(0x2000000000L);
      case 117:
         return jjMoveStringLiteralDfa1_5(0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa1_5(0x100000000000L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_5(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_5(active0, 0x1c000040000L);
      case 99:
         return jjMoveStringLiteralDfa2_5(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa2_5(active0, 0x1103c00800000L);
      case 104:
         return jjMoveStringLiteralDfa2_5(active0, 0x200000000L);
      case 105:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_5(1, 24, 1);
         break;
      case 109:
         return jjMoveStringLiteralDfa2_5(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_5(active0, 0x1c0000000L);
      case 111:
         return jjMoveStringLiteralDfa2_5(active0, 0x6600006380000L);
      case 114:
         return jjMoveStringLiteralDfa2_5(active0, 0x800000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_5(active0, 0x60000000000L);
      default :
         break;
   }
   return jjStartNfa_5(0, active0);
}
private int jjMoveStringLiteralDfa2_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_5(active0, 0x4000000000L);
      case 99:
         return jjMoveStringLiteralDfa3_5(active0, 0x1000000000000L);
      case 100:
         return jjMoveStringLiteralDfa3_5(active0, 0x18004080000L);
      case 101:
         return jjMoveStringLiteralDfa3_5(active0, 0x200000000L);
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_5(2, 43, 1);
         return jjMoveStringLiteralDfa3_5(active0, 0x200000L);
      case 108:
         return jjMoveStringLiteralDfa3_5(active0, 0x4001c00000000L);
      case 109:
         return jjMoveStringLiteralDfa3_5(active0, 0x140000L);
      case 110:
         return jjMoveStringLiteralDfa3_5(active0, 0x2000000L);
      case 111:
         return jjMoveStringLiteralDfa3_5(active0, 0x800000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_5(active0, 0x1c0000000L);
      case 114:
         return jjMoveStringLiteralDfa3_5(active0, 0x700000c00000L);
      case 116:
         return jjMoveStringLiteralDfa3_5(active0, 0x60000000000L);
      case 119:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_5(2, 49, 1);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_5(active0, 0x2000000000L);
      default :
         break;
   }
   return jjStartNfa_5(1, active0);
}
private int jjMoveStringLiteralDfa3_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_5(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa4_5(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_5(3, 18, 1);
         return jjMoveStringLiteralDfa4_5(active0, 0x5c04400000L);
      case 105:
         return jjMoveStringLiteralDfa4_5(active0, 0x618000200000L);
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_5(3, 37, 1);
         return jjMoveStringLiteralDfa4_5(active0, 0x1160002000000L);
      case 117:
         return jjMoveStringLiteralDfa4_5(active0, 0x48001c0080000L);
      case 118:
         return jjMoveStringLiteralDfa4_5(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_5(2, active0);
}
private int jjMoveStringLiteralDfa4_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_5(4, 21, 1);
         return jjMoveStringLiteralDfa5_5(active0, 0x1c00000000L);
      case 101:
         return jjMoveStringLiteralDfa5_5(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa5_5(active0, 0x1100000900000L);
      case 107:
         return jjMoveStringLiteralDfa5_5(active0, 0x200000000L);
      case 108:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_5(4, 26, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 38, 1);
         return jjMoveStringLiteralDfa5_5(active0, 0x80000L);
      case 109:
         return jjMoveStringLiteralDfa5_5(active0, 0x4000000000000L);
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_5(active0, 0x70000000000L);
      case 112:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_5(4, 47, 1);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_5(active0, 0x2000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_5(active0, 0x180000000L);
      case 122:
         return jjMoveStringLiteralDfa5_5(active0, 0x600000000000L);
      default :
         break;
   }
   return jjStartNfa_5(3, active0);
}
private int jjMoveStringLiteralDfa5_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_5(active0, 0x180000000L);
      case 98:
         return jjMoveStringLiteralDfa6_5(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa6_5(active0, 0x100000800000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_5(5, 19, 1);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_5(5, 20, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_5(5, 22, 1);
         else if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 50, 1);
         return jjMoveStringLiteralDfa6_5(active0, 0x40000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_5(active0, 0x1600002000000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_5(5, 40, 1);
         break;
      case 116:
         return jjMoveStringLiteralDfa6_5(active0, 0x1c00000000L);
      default :
         break;
   }
   return jjStartNfa_5(4, active0);
}
private int jjMoveStringLiteralDfa6_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_5(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_5(active0, 0x100080000000L);
      case 98:
         return jjMoveStringLiteralDfa7_5(active0, 0x400000000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_5(6, 23, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_5(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa7_5(active0, 0x2000000L);
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_5(6, 48, 1);
         return jjMoveStringLiteralDfa7_5(active0, 0x600000000000L);
      case 111:
         return jjMoveStringLiteralDfa7_5(active0, 0x1a00000000L);
      default :
         break;
   }
   return jjStartNfa_5(5, active0);
}
private int jjMoveStringLiteralDfa7_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa8_5(active0, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa8_5(active0, 0x100000000L);
      case 108:
         return jjMoveStringLiteralDfa8_5(active0, 0x100002000000L);
      case 111:
         return jjMoveStringLiteralDfa8_5(active0, 0x400000000L);
      case 112:
         return jjMoveStringLiteralDfa8_5(active0, 0x1800000000L);
      case 114:
         return jjMoveStringLiteralDfa8_5(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa8_5(active0, 0x600000000000L);
      case 120:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_5(7, 33, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_5(6, active0);
}
private int jjMoveStringLiteralDfa8_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_5(active0, 0x100000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_5(active0, 0x600000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_5(active0, 0x82000000L);
      case 108:
         return jjMoveStringLiteralDfa9_5(active0, 0x100000000L);
      case 114:
         return jjMoveStringLiteralDfa9_5(active0, 0x40000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_5(active0, 0x1800000000L);
      case 120:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_5(8, 34, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_5(7, active0);
}
private int jjMoveStringLiteralDfa9_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_5(9, 31, 1);
         break;
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_5(9, 32, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_5(active0, 0x1800000000L);
      case 108:
         return jjMoveStringLiteralDfa10_5(active0, 0x700000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_5(active0, 0x40000000000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_5(9, 25, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_5(8, active0);
}
private int jjMoveStringLiteralDfa10_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_5(active0, 0x600000000000L);
      case 97:
         return jjMoveStringLiteralDfa11_5(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa11_5(active0, 0x1800000000L);
      case 117:
         return jjMoveStringLiteralDfa11_5(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_5(9, active0);
}
private int jjMoveStringLiteralDfa11_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa12_5(active0, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa12_5(active0, 0x200000000000L);
      case 110:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_5(active0, 0x1000000000L);
      case 112:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_5(11, 42, 1);
         break;
      case 121:
         return jjMoveStringLiteralDfa12_5(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_5(10, active0);
}
private int jjMoveStringLiteralDfa12_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa13_5(active0, 0x200000000000L);
      case 103:
         return jjMoveStringLiteralDfa13_5(active0, 0x1000000000L);
      case 111:
         return jjMoveStringLiteralDfa13_5(active0, 0x500000000000L);
      default :
         break;
   }
   return jjStartNfa_5(11, active0);
}
private int jjMoveStringLiteralDfa13_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa14_5(active0, 0x401000000000L);
      case 117:
         return jjMoveStringLiteralDfa14_5(active0, 0x100000000000L);
      case 121:
         return jjMoveStringLiteralDfa14_5(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_5(12, active0);
}
private int jjMoveStringLiteralDfa14_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 109:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_5(14, 46, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa15_5(active0, 0x201000000000L);
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_5(14, 44, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_5(13, active0);
}
private int jjMoveStringLiteralDfa15_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa16_5(active0, 0x201000000000L);
      default :
         break;
   }
   return jjStartNfa_5(14, active0);
}
private int jjMoveStringLiteralDfa16_5(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_5(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_5(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 112:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_5(16, 36, 1);
         break;
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_5(16, 45, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_5(15, active0);
}
private int jjStartNfaWithStates_5(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_5(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 47)
                     jjAddStates(3, 4);
                  else if (curChar == 36)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 47)
                     jjAddStates(3, 4);
                  break;
               case 3:
                  if (curChar == 47)
                     jjCheckNAddStates(5, 7);
                  break;
               case 4:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(5, 7);
                  break;
               case 5:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 42)
                     jjAddStates(8, 9);
                  break;
               case 11:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 12:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 13:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0x3ff201000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if ((0x8400000000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 18:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L && kind > 29)
                     kind = 29;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  jjAddStates(5, 7);
                  break;
               case 9:
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  jjCheckNAddTwoStates(12, 10);
                  break;
               case 15:
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(1);
                  break;
               case 4:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(5, 7);
                  break;
               case 9:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
               case 12:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(12, 10);
                  break;
               case 15:
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 18:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 69;
            return 25;
         }
         return -1;
      case 1:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 1;
            return 25;
         }
         return -1;
      case 2:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 2;
            return 25;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 72);
      case 44:
         return jjStopAtPos(0, 71);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 60:
         return jjStopAtPos(0, 73);
      case 62:
         return jjStopAtPos(0, 74);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x4L);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 62:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         break;
      case 110:
         return jjMoveStringLiteralDfa2_0(active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(0, 0L, active1);
}
private int jjMoveStringLiteralDfa2_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(0, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, 0L, active1);
      return 2;
   }
   switch(curChar)
   {
      case 117:
         return jjMoveStringLiteralDfa3_0(active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(1, 0L, active1);
}
private int jjMoveStringLiteralDfa3_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(1, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, 0L, active1);
      return 3;
   }
   switch(curChar)
   {
      case 109:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 25);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 57;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  else if (curChar == 36)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(25);
                  }
                  break;
               case 24:
                  if (curChar != 36)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(25);
                  break;
               case 33:
                  if (curChar == 47)
                     jjAddStates(12, 13);
                  break;
               case 34:
                  if (curChar == 47)
                     jjCheckNAddStates(14, 16);
                  break;
               case 35:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 36:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 37:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 38:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 40:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 42)
                     jjAddStates(17, 18);
                  break;
               case 42:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 43:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               case 44:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                     jjCheckNAdd(25);
                  }
                  if (curChar == 76)
                     jjAddStates(19, 20);
                  else if (curChar == 83)
                     jjAddStates(21, 22);
                  else if (curChar == 68)
                     jjAddStates(23, 24);
                  else if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if (curChar == 116 && kind > 67)
                     kind = 67;
                  break;
               case 1:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 114 && kind > 67)
                     kind = 67;
                  break;
               case 4:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101 && kind > 67)
                     kind = 67;
                  break;
               case 11:
               case 29:
                  if (curChar == 108)
                     jjCheckNAdd(10);
                  break;
               case 12:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 103 && kind > 67)
                     kind = 67;
                  break;
               case 17:
               case 46:
               case 53:
                  if (curChar == 110)
                     jjCheckNAdd(16);
                  break;
               case 18:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 98 && kind > 67)
                     kind = 67;
                  break;
               case 21:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 22:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if (curChar == 66)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if (curChar == 68)
                     jjAddStates(23, 24);
                  break;
               case 27:
                  if (curChar == 116)
                     jjCheckNAdd(10);
                  break;
               case 28:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 35:
                  jjAddStates(14, 16);
                  break;
               case 40:
                  jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
               case 43:
                  jjCheckNAddTwoStates(43, 41);
                  break;
               case 45:
                  if (curChar == 83)
                     jjAddStates(21, 22);
                  break;
               case 47:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 116 && kind > 68)
                     kind = 68;
                  break;
               case 51:
                  if (curChar == 101)
                     jjCheckNAdd(50);
                  break;
               case 52:
                  if (curChar == 76)
                     jjAddStates(19, 20);
                  break;
               case 54:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 115)
                     jjCheckNAdd(50);
                  break;
               case 56:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 25:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 69)
                     kind = 69;
                  jjCheckNAdd(25);
                  break;
               case 35:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 40:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
               case 43:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(43, 41);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 57 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_4(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_4(int pos, long active0)
{
   return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_4(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_4(0, 3, 0);
      case 13:
         return jjStartNfaWithStates_4(0, 4, 0);
      case 32:
         return jjStartNfaWithStates_4(0, 1, 0);
      case 40:
         return jjStartNfaWithStates_4(0, 9, 0);
      case 41:
         return jjStartNfaWithStates_4(0, 10, 0);
      case 91:
         return jjStartNfaWithStates_4(0, 11, 0);
      case 93:
         return jjStartNfaWithStates_4(0, 12, 0);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_4(1, 0);
   }
}
private int jjStartNfaWithStates_4(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_4(state, pos + 1);
}
private int jjMoveNfa_4(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(0);
                  if (curChar == 47)
                     jjAddStates(25, 26);
                  break;
               case 0:
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 47)
                     jjCheckNAddStates(27, 29);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 42)
                     jjAddStates(30, 31);
                  break;
               case 10:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 12:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0xd7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  jjAddStates(27, 29);
                  break;
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(27, 29);
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 44:
         return jjStopAtPos(0, 56);
      case 46:
         return jjStopAtPos(0, 57);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 23;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjstateSet[jjnewStateCnt++] = 1;
                  }
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if (curChar == 47)
                     jjAddStates(32, 33);
                  else if (curChar == 36)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAdd(3);
                  }
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 2:
                  if (curChar != 36)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 5:
                  if ((0xf7fffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(5, 6);
                  break;
               case 6:
                  if (curChar == 34 && kind > 58)
                     kind = 58;
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xf7ffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 58)
                     kind = 58;
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 11:
                  if (curChar == 47)
                     jjAddStates(32, 33);
                  break;
               case 12:
                  if (curChar == 47)
                     jjCheckNAddStates(34, 36);
                  break;
               case 13:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(34, 36);
                  break;
               case 14:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 15:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 16:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 42)
                     jjAddStates(37, 38);
                  break;
               case 20:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 21:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               case 22:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  jjAddStates(39, 40);
                  break;
               case 8:
                  jjAddStates(41, 42);
                  break;
               case 13:
                  jjAddStates(34, 36);
                  break;
               case 18:
                  jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
               case 21:
                  jjCheckNAddTwoStates(21, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 3:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(3);
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(39, 40);
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(41, 42);
                  break;
               case 13:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(34, 36);
                  break;
               case 18:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
               case 21:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(21, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 23 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 9);
      case 41:
         return jjStopAtPos(0, 10);
      case 42:
         return jjStopAtPos(0, 63);
      case 58:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 62);
      case 91:
         return jjStopAtPos(0, 11);
      case 93:
         return jjStopAtPos(0, 12);
      case 123:
         return jjStopAtPos(0, 7);
      case 125:
         return jjStopAtPos(0, 8);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 64)
                        kind = 64;
                  }
                  else if (curChar == 47)
                     jjAddStates(43, 44);
                  else if (curChar == 36)
                  {
                     if (kind > 60)
                        kind = 60;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x3ff201000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x8400000000L & l) != 0L && kind > 64)
                     kind = 64;
                  break;
               case 3:
                  if (curChar == 47)
                     jjAddStates(43, 44);
                  break;
               case 4:
                  if (curChar == 47)
                     jjCheckNAddStates(45, 47);
                  break;
               case 5:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 6:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 7:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 8:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 11:
                  if (curChar == 42)
                     jjAddStates(48, 49);
                  break;
               case 12:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 13:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               case 14:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  jjAddStates(45, 47);
                  break;
               case 10:
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  jjCheckNAddTwoStates(13, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(1);
                  break;
               case 5:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(45, 47);
                  break;
               case 10:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
               case 13:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(13, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_1(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_1(0, 3, 0);
      case 13:
         return jjStartNfaWithStates_1(0, 4, 0);
      case 32:
         return jjStartNfaWithStates_1(0, 1, 0);
      case 40:
         return jjStartNfaWithStates_1(0, 9, 0);
      case 41:
         return jjStartNfaWithStates_1(0, 10, 0);
      case 91:
         return jjStartNfaWithStates_1(0, 11, 0);
      case 93:
         return jjStartNfaWithStates_1(0, 12, 0);
      case 123:
         return jjStartNfaWithStates_1(0, 7, 0);
      case 125:
         return jjStartNfaWithStates_1(0, 8, 0);
      default :
         return jjMoveNfa_1(1, 0);
   }
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 13;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                  {
                     if (kind > 65)
                        kind = 65;
                     jjCheckNAdd(0);
                  }
                  if (curChar == 47)
                     jjAddStates(25, 26);
                  break;
               case 0:
                  if ((0xf7ffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if (curChar == 47)
                     jjCheckNAddStates(27, 29);
                  break;
               case 3:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(27, 29);
                  break;
               case 4:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 5:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 6:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 42)
                     jjAddStates(30, 31);
                  break;
               case 10:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               case 12:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  jjAddStates(27, 29);
                  break;
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(0);
                  break;
               case 3:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(27, 29);
                  break;
               case 8:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
               case 11:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(11, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 13 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 18, 19, 3, 8, 4, 5, 7, 11, 13, 18, 19, 34, 39, 35, 36, 
   38, 42, 44, 54, 56, 49, 51, 28, 32, 2, 7, 3, 4, 6, 10, 12, 
   12, 17, 13, 14, 16, 20, 22, 5, 6, 8, 9, 4, 9, 5, 6, 8, 
   12, 14, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\173", "\175", "\50", "\51", "\133", 
"\135", null, null, null, null, null, "\156\141\155\145", "\155\157\144\165\154\145", 
"\144\157\155\141\151\156", "\154\157\147\151\143", "\163\143\162\145\145\156", 
"\163\145\162\166\151\143\145", "\165\151", "\143\157\156\164\162\157\154\154\145\162", 
"\155\157\144\145\154", null, null, null, "\151\156\160\165\164", 
"\151\156\160\165\164\137\141\162\145\141", "\151\156\160\165\164\137\146\151\154\145", 
"\143\150\145\143\153\142\157\170", "\163\145\154\145\143\164\142\157\170", 
"\163\145\154\145\143\164\157\160\164\151\157\156", "\163\145\154\145\143\164\157\160\164\151\157\156\147\162\157\165\160", 
"\164\145\170\164", "\154\141\142\145\154", "\162\141\144\151\157", "\162\141\144\151\157\163", 
"\142\165\164\164\157\156", "\142\165\164\164\157\156\137\147\162\157\165\160", "\151\155\147", 
"\166\145\162\164\151\143\141\154\137\154\141\171\157\165\164", "\150\157\162\151\172\157\156\164\141\154\137\154\141\171\157\165\164", 
"\150\157\162\151\172\157\156\164\141\154\137\146\157\162\155", "\147\162\157\165\160", "\163\145\143\164\151\157\156", "\162\157\167", 
"\143\157\154\165\155\156", "\43", null, null, null, null, "\54", "\56", null, null, null, "\72", "\73", 
"\52", null, null, "\145\156\165\155", null, null, null, "\55\76", "\54", "\52", 
"\74", "\76", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DomainState",
   "CssStyleValueState",
   "CssStyleState",
   "InputDescriptionState",
   "JsContentState",
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff7fc1f81L, 0x7ffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[57];
private final int[] jjstateSet = new int[114];
protected char curChar;
/** Constructor. */
public SWLTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public SWLTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 57; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 6 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   t = Token.newToken(jjmatchedKind, curTokenImage);

   return t;
}

int curLexState = 5;
int defaultLexState = 5;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
     case 4:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_4();
       break;
     case 5:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_5();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
