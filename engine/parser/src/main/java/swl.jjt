/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  MULTI=true;
  KEEP_LINE_COLUMN = false;
  static = false;
  NODE_CLASS = "SWLNode";
//  DEBUG_PARSER=true;
//  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(SWL)
package ro.swl.engine.parser;

public class SWL
{

  private int nestingLvl = 0;

  
  public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    SWL parser = new SWL(System.in);
    try
    {
      ASTSwdlApp n = parser.SwdlApp();
      n.dump("");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
    }
  }

 	public static ASTSwdlApp  parse( java.io.File f) throws ParseException, java.io.FileNotFoundException {
		java.io.FileInputStream fStr = new java.io.FileInputStream(f);
		SWL parser = new SWL(fStr);
		return parser.SwdlApp();
	}
}

PARSER_END(SWL)

<*> SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| < "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < "/*" (~[ "*" ])* "*"
    (
      ~[ "/" ] (~[ "*" ])* "*"
    )*
    "/" >
}
<*> TOKEN :
{
  <OPEN_BRACKET: "{" >
| <CLOSE_BRACKET: "}" >
| < OPEN_R_BRACKET: "(" >
| < CLOSE_R_BRACKET: ")" >
| < OPEN_S_BRACKET: "[" >
| < CLOSE_S_BRACKET: "]" >
}

<DEFAULT> TOKEN :
{
  <#ALPHA_CHAR: [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff"
      ] >
| <#NUM_CHAR:   [
       "\u0030"-"\u0039"
      ] >
| <#ALPHANUM_CHAR: ( <ALPHA_CHAR> | <NUM_CHAR> ) >
| <#IDENTIFIER_CHAR: ( <ALPHANUM_CHAR> | [ "_", "-" ] ) >
| <#QUOTE:      ( "'" | "\"" )>
| < APP_NAME : "name">
| < MODULE: "module"  > 
| < DOMAIN: "domain" >
| < LOGIC: "logic" >
| < SCREEN : "screen"> 
| < UI : "ui" > 
| < CONTROLLER: "controller" >
| < MODEL: "model" > 
| <#IDENTIFIER: <ALPHA_CHAR> (<IDENTIFIER_CHAR>)* >
| < QUOTED_IDENTIFIER: < QUOTE > <IDENTIFIER > < QUOTE >>
| < QUOTED_TEXT: < QUOTE > (~["\"","'"])* < QUOTE >>

// Model components

| < INPUT: "input" >
| < INPUT_AREA: "input_area" >
| < INPUT_FILE: "input_file" >
| < CHECKBOX: "checkbox" >
| < SELECTBOX: "selectbox" >
| < SELECTOPTION: "selectoption" >
| < SELECTOPTIONGROUP: "selectoptiongroup" >
| < TEXT: "text" >
| < LABEL: "label" >
| < RADIO: "radio" >
| < RADIOS: "radios" >
| < BUTTON: "button" >
| < BUTTONGROUP: "button_group" >
| < IMG: "img" >

// Layout Components

| < VERTICAL_LAYOUT: "vertical_layout" >
| < HORIZONTAL_LAYOUT: "horizontal_layout" >
| < HORIZONTAL_FORM: "horizontal_form" >
| < GROUP: "group" >
| < SECTION: "section" >
| < ROW: "row" >
| < COLUMN: "column" >
| < NO_LABEL_FLAG: "#" >
| < NAME: < IDENTIFIER >> 
}

< JsContentState > TOKEN:
{
  < ANY_NON_OPEN_CLOSE: (~["{","}"])+ >
}


< InputDescriptionState > TOKEN:
{
  < NUMBER : < NUM_CHAR > (< NUM_CHAR >)? >
| < VARIABLE : < IDENTIFIER >>
| < COMMA : "," >
| < DOT: "." >
| < LITERAL: ("\"" (~["\"",";"])* "\"") | ("'" (~["'",";"])* "'") >
| < DESC_QUOTE :< QUOTE >>
}

< CssStyleState > TOKEN :
{
  < STYLE_CLASS : < IDENTIFIER >>
| < COLON : ":" >
| < SEMICOLON : ";" >
| < ASTERISK : "*" >
| < CLOSE_QUOTE :< QUOTE >>
}

< CssStyleValueState > TOKEN :
{
  < ANY_NO_SEMICOLON : (~[";"])+ >
}

< DomainState > TOKEN :
{
  < ENUM:   "enum" >
| < PRIMITIVE: "Date" | "String" | "int" | "Integer" |"Double" | "double" | "long" | "Long" | "Blob" >
| < COLLECTION: "Set" | "List" >
| < CLS_NAME : < IDENTIFIER >>
| < INDICATOR : "->" >
| < SEPARATOR : "," >
| < MANY_MARKER : "*" >
| < OPEN_ANGLE: "<" >
| < CLOSE_ANGLE: ">" >
}


< LogicState > TOKEN :
{
	< CRUD : "crud" >
| 	< SEARCHER : "searcher" >
|   < SERVICE : "service" >
| 	< S_PRIMITIVE: "Date" | "String" | "int" | "Integer" |"Double" | "double" | "long" | "Long" | "Blob" >
| 	< S_COLLECTION: "Set" | "List" >
|   < VOID : "void" >
|   < S_COMMA : "," >
|   < EXT_IF_REST : "rest" >
|   < EXT_IF_FORM : "form" >
|   < EXT_IF_FILE : "file" >
|   < EXT_IF_WS : 	"ws" >
|   < EXT_IF_EMAIL: "email" >
|   < INTERFACE : "interface" >
|   < EXCHANGE : "exchange" >
|   < E_MODEL : "model" >
|   < EXTERNAL : "external" >
|   < S_NAME : < NAME >>
|   < S_QUOTED_TEXT: < QUOTE > (~["\"","'"])* < QUOTE >>
| 	< S_OPEN_ANGLE: "<" >
| 	< S_CLOSE_ANGLE: ">" >
}





/** ******************************************************************** */
/** *************************  SWL GRAMMAR  **************************** */
/** ******************************************************************** */

ASTSwdlApp SwdlApp() :
{}
{
  NameDecl() ( Module() )+ <EOF>
  {
    return jjtThis;
  }
}


void NameDecl() :{}
{
  	< APP_NAME > 
 	AppName()
}

void AppName(): {Token t;}
{
  t = < QUOTED_IDENTIFIER >
 {
 	jjtThis.setImageWithoutQuote(t.image);
 }
}
void Module() : {}
{
  < MODULE >
  ModuleName()
  ModuleBody()
}

void ModuleName() : {Token t;}
{
  t = < NAME >
  {
	jjtThis.setImage(t.image);
  }
}

void ModuleBody() : {}
{
	< OPEN_BRACKET >
	  ( Ui () )?
	  (Logic())?
	  (Domain() )?
	 < CLOSE_BRACKET >
}

void Ui() :
{
}
{
  < UI >
  < OPEN_BRACKET >
   ( Screen() )*
 < CLOSE_BRACKET >  
}

void Screen() :
{
}
{
  < SCREEN >
  ScreenName()
  < OPEN_BRACKET >
 	MvcArea()
 < CLOSE_BRACKET >  
}

void ScreenName() :
{
  Token t;
}
{
  t= < NAME >
}

void Model() : {}
{
   < MODEL >
  GenericBlock(DEFAULT)
}

void Controller() :{}
{
  < CONTROLLER >
  GenericBlock(DEFAULT)
}


void GenericBlock(int switchBackState) :
{
}
{
  < OPEN_BRACKET>
  	{
  	 token_source.SwitchTo(JsContentState);
  	 nestingLvl++;
  	}
  (< ANY_NON_OPEN_CLOSE > | GenericBlock(switchBackState))*
  < CLOSE_BRACKET >
  {
    nestingLvl--;
    if ( nestingLvl == 0 )
    {
      token_source.SwitchTo(switchBackState);
    }
  }
}

void MvcArea() : {}
{
   (Model())?
  (Controller())?
  (
	  Input()
	| InputFile()
	| InputArea()
	| Checkbox()
	| Selectbox()
	| Text()
	| Radio()
	| Radios()
	| Img()
	| Button()
	| ButtonGroup()
	// layout components
	| VerticalLayout()
	| HorizontalLayout()
	| HorizontalForm()
	| Section() 
	)*
}


ASTVerticalLayout VerticalLayout() : {}
{
    < VERTICAL_LAYOUT >
   	StdLayoutDescription()
  	< OPEN_BRACKET >
  		(Model())?
  		(Controller())?	
  		( LayoutRow())*
  	< CLOSE_BRACKET >
  	{
  	  return jjtThis;
  	}
}

ASTHorizontalLayout HorizontalLayout() :
{
  ASTLayoutColumn n = null;
  int noOfColumns = 0;
}
{
  	< HORIZONTAL_LAYOUT >
  	StdLayoutDescription()	
  	< OPEN_BRACKET >
  		( n =  LayoutColumn()
  		{
		  noOfColumns = noOfColumns + n.getColSpan();
  		})*
  		
  	< CLOSE_BRACKET >
  	{
  	  if ( noOfColumns > 12 )
  	  {
		throw new ParseException("An horizontal_layout() cannot have more than 12 columns");
  	  }
  	   return jjtThis;
  	}
}

ASTLayoutColumn LayoutColumn() :
{
  int colSpan = 0 ;
}
{
	< COLUMN >
	colSpan = ColumnDescription()
	< OPEN_BRACKET >
  		MvcArea()
  	< CLOSE_BRACKET >
  	{
  	   jjtThis.setColSpan(colSpan);
  	   return jjtThis;
  	}
}


int ColumnDescription() :
{
  Token t = null;
}
{
  < OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
	t = < NUMBER >
	( < COMMA >  CssStyle() )?
  < CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
  {
    jjtThis.setImage(t.image);
    return Integer.parseInt(t.image);
  }
}

ASTHorizontalForm HorizontalForm() : {}
{
  < HORIZONTAL_FORM >
  StdLayoutDescription()
  < OPEN_BRACKET >
  		( HorizontalFormRow())*
  < CLOSE_BRACKET >
  {
    return jjtThis;
  }
}

ASTHorizontalFormRow HorizontalFormRow() : {}
{
	  (< NO_LABEL_FLAG > { jjtThis.setNoLabelRendering(); } )?
	    < ROW >
	  	StdLayoutDescription()
	  < OPEN_BRACKET >
	  		MvcArea()
	  < CLOSE_BRACKET >
	   {
	    return jjtThis;
	  }
}

ASTLayoutRow LayoutRow() : {}
{
  < ROW >
  	StdLayoutDescription()
  < OPEN_BRACKET >
  		MvcArea()
  < CLOSE_BRACKET >
   {
    return jjtThis;
  }
}

ASTSection Section() : {Token t = null;}
{
  t = < SECTION >
   StdInputDescription()
  < OPEN_BRACKET >
  		MvcArea()
  < CLOSE_BRACKET >
  {
    return jjtThis;
  }
}

ASTInput Input():  {}
{
 (< NO_LABEL_FLAG > { jjtThis.setNoLabelRendering(); } )? < INPUT > (StdInputDescription())? {  return jjtThis; } 
}


ASTInputFile InputFile():  {}
{
 < INPUT_FILE > (StdInputDescription())? { return jjtThis; } 
}

ASTInputArea InputArea(): {}
{
 < INPUT_AREA >   (StdInputDescription())? { return jjtThis; } 
}

ASTCheckbox Checkbox(): {}
{
 < CHECKBOX > (StdInputDescription())?  { return jjtThis; } 
}

ASTSelectbox Selectbox():  {}
{
 < SELECTBOX >  (SelectInputDescription())? (SelectboxOptions())? {  return jjtThis; } 
}

ASTRadio Radio(): {}
{
 < RADIO > (RadioInputDescription())? { return jjtThis; } 
}

ASTRadios Radios(): {}
{
 < RADIOS >  (RadiosInputDescription())? { return jjtThis; } 
}

ASTText Text(): {}
{
 < TEXT > (StdInputDescription())? { return jjtThis; } 
}

ASTLabel Label() : {}
{
 < LABEL > { return jjtThis;}
}

ASTImg Img(): {}
{
 < IMG > (StdInputDescription())?  { return jjtThis; } 
}

void ButtonGroup() : {}
{
 < BUTTONGROUP > < OPEN_BRACKET > (Button())* < CLOSE_BRACKET >
}

ASTButton Button() : {}
{
 < BUTTON > (ButtonDescription())?  { return jjtThis; } 
}

void ButtonDescription() : {}
{
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(
		  ButtonAction()
		  (< COMMA > CssStyle() )?
		)?
  	< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT); }
}

void ButtonAction() : {Token t; String param ;StringBuffer s = new StringBuffer();}
{
  t = < VARIABLE >{ s.append(t.image);}
  t = <OPEN_R_BRACKET >{s.append(t.image);}
  ( param = ButtonActionParameter() {s.append(param);}
   ( t = < COMMA > {s.append(t.image);}
    param = ButtonActionParameter(){s.append(" " + param);}
   )*
  )?
  t = < CLOSE_R_BRACKET > {s.append(t.image);}
  {
	jjtThis.setImage(s.toString());
  }
}

String ButtonActionParameter() : {Token t; StringBuffer s = new StringBuffer();}
{
	t = <VARIABLE >{s.append(t.image);}
  	(
  	  t = < DOT > {s.append(t.image);}
  	  t = <VARIABLE >{s.append(t.image);}
  	)*
  {
	return s.toString();
  }
}
 

void ModelVariable():
{
  StringBuffer s = new StringBuffer();
  Token t;
}
{
    t= < LITERAL > { s.append(t.image.replace("\"","").replace("'","")); jjtThis.setLiteral(true); jjtThis.setImage(s.toString()); }
    |( t = < VARIABLE > { s.append(t.image); }
	      (
	       t= < DOT > { s.append(t.image); }
	       t = <VARIABLE > { s.append(t.image); }
	       )*
     ) { jjtThis.setImage(s.toString());  }
}

void StdLayoutDescription(): {}
{
  	< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		(  CssStyle() )?
	< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}


void RadioInputDescription() : {}
{
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		    ModelVariable() // model variable to bind to
		      < COMMA > ModelVariable() // value property 
			( < COMMA >  CssStyle() )?
		)?

		< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}

void RadiosInputDescription() : {}
{
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
 		(
		   ModelVariable() 			  // model variable to bind to
		   < COMMA > ModelVariable() // model values collection on which to iterate for the 'value' attribute of the radio
		   < COMMA > ModelVariable() // value property 
		 ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}

void SelectInputDescription() : {}
{
		< OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
		
		(
		   ModelVariable() 			 // model value to bind to
		   < COMMA > ModelVariable() // model value representing the options
		   ( < COMMA >  CssStyle() )?
		)?


		< CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}


void SelectboxOptions() : {}
{
  < OPEN_BRACKET >
  
 (
     	SelectOption()
 |  SelectOptionGroup()
 )*

  < CLOSE_BRACKET >
}

void SelectOption() : {}
{
   < SELECTOPTION > (RadioInputDescription()) // reuse the old production despite the bad name...
}


void SelectOptionGroup() : {}
{
   < SELECTOPTIONGROUP > StdInputDescription() < OPEN_BRACKET > (SelectOption())* < CLOSE_BRACKET > 	
}


void StdInputDescription(): {}
{
  < OPEN_R_BRACKET > { token_source.SwitchTo(InputDescriptionState); }
  
 	 (
 	   ModelVariable()  
 	   ( < COMMA >  CssStyle() )?
 	 )?
 	 
  < CLOSE_R_BRACKET > { token_source.SwitchTo(DEFAULT) ;}
}


void CssStyle(): {}
{
  < DESC_QUOTE > { token_source.SwitchTo(CssStyleState); }

  (
    LOOKAHEAD(CssClassName())
   	CssClassName()
    |
  	CssInlineStyle()
  )*
 	 
  < CLOSE_QUOTE >  { token_source.SwitchTo(InputDescriptionState); }
}

void CssClassName()  : {Token t = null;}
{
	t = < STYLE_CLASS >  < SEMICOLON >
	 {
		jjtThis.setImage(t.image); 
	}
}

void CssInlineStyle() : {String t1 = null; String t2 = null;}
{
    t1 =  CssStyleName()
 	 < COLON > {token_source.SwitchTo(CssStyleValueState);}
 	t2 =  CssStyleValue()  {token_source.SwitchTo(CssStyleState);}
 	 < SEMICOLON >
	{
		jjtThis.setImage(t1 + ": "+t2); 
	}
}


String CssStyleName():  {Token t = null;}
{
  (< ASTERISK >)? t = < STYLE_CLASS > { return t.image; }
}

String CssStyleValue(): {Token t = null;}
{
  t = <ANY_NO_SEMICOLON > {  return t.image.trim();  }
}




ASTLogic Logic() : {}
{
  < LOGIC >
  < OPEN_BRACKET > { token_source.SwitchTo(LogicState); }
   	( 
   	  ExternalInterface() | Service()
   	)*
  < CLOSE_BRACKET >  { token_source.SwitchTo(DEFAULT); return jjtThis;}
}

void ExternalInterface() : {Token t; Token t1;}
{
	< EXTERNAL >
	( t = < EXT_IF_REST > |  t = < EXT_IF_FORM > |  t = < EXT_IF_FILE > |  t =  < EXT_IF_WS > |  t = < EXT_IF_EMAIL >	) { jjtThis.setType(t.image);}
	< INTERFACE >
	t1 = < S_NAME > {jjtThis.setName(t1.image);}
		< OPEN_BRACKET >
			( ExchangeModel() ) ?
			( ServiceActions() | Action() )*
		< CLOSE_BRACKET > { token_source.SwitchTo(LogicState); }
}

void ExchangeModel() : {}
{
  	 < EXCHANGE > < E_MODEL >
  	 	< OPEN_BRACKET >  { token_source.SwitchTo(DomainState); }
  	 		( Entity() ) *
  	 	< CLOSE_BRACKET >  { token_source.SwitchTo(LogicState); }
}

void ServiceActions() : {Token t;}
{
  < SERVICE > t = < S_NAME > { jjtThis.setImage(t.image);}
  	< OPEN_BRACKET >
  	< CLOSE_BRACKET >
}

void Service() : {Token t;}
{
  < SERVICE > t =  <S_NAME> { jjtThis.setImage(t.image);}
  < OPEN_BRACKET >
  	(
  	  Crud() | Action()
  	)* 
  < CLOSE_BRACKET >
}

void Crud() : {Token t;}
{
	< CRUD > t = <S_NAME>	{ jjtThis.setEntity(t.image);}
	< OPEN_BRACKET >
		(Searcher())*
	< CLOSE_BRACKET >
}

void Searcher() : {Token t1; Token t2; Token t3;}
{
	< SEARCHER >
	 t2 = <S_NAME> { jjtThis.setSearcherName(t2.image); }
	 < OPEN_BRACKET >
		 t3 = < S_QUOTED_TEXT >{jjtThis.setQuery(t3.image);}
	 < CLOSE_BRACKET >
}

void Action() : {Token t1; Token t2; ASTType type;  }
{
  	
	 (
	   	  type = Type() { jjtThis.setReturnType(type);  }
	 	| < VOID >	  {jjtThis.setVoid(true);}
	 )
	 
	 
	t1 = < S_NAME > { jjtThis.setImageWithoutQuote(t1.image);}
	 < OPEN_R_BRACKET >
	 		[ ActionParam() ( < S_COMMA > ActionParam() )* ] 
	 < CLOSE_R_BRACKET > {  }
	 GenericBlock(LogicState)
}

ASTType Type() : {Token t2; Token t3 = null;}
{
	 ( 
		t2 =  < S_PRIMITIVE > { jjtThis.setPrimitive(true);}
		|t2 =  < S_COLLECTION > <S_OPEN_ANGLE > t3 = < S_NAME > <S_CLOSE_ANGLE >  
		|t2 =  < S_NAME > 
	  )
  {
    if ( t3 != null )
    {
   		jjtThis.setTypeName(t2.image+"<"+t3.image+">");
  	}
  	else
  	{
  	  	jjtThis.setTypeName(t2.image);
 	}
 	
    return jjtThis;
  } 
}

void ActionParam() : { ASTType t1; Token t2;}
{
	t1 = Type() {jjtThis.setType(t1);}
	t2 = < S_NAME > {jjtThis.setName(t2.image);}
}


void Domain() : {}
{
  < DOMAIN >
  < OPEN_BRACKET > { token_source.SwitchTo(DomainState); }
  (
    Enum()
	|
	Entity()
  )*
   < CLOSE_BRACKET >  { token_source.SwitchTo(DEFAULT) ;}
}

void Enum() : { Token t;}
{
  < ENUM >  t = < CLS_NAME >
  < OPEN_BRACKET >
  		( EnumLiteral() )
  		(< SEPARATOR > EnumLiteral())*
  < CLOSE_BRACKET >
  { jjtThis.setImage(t.image);  }
}

void EnumLiteral() : { Token t;}  
{
	t = < CLS_NAME > { jjtThis.setImage(t.image);	}
}


ASTEntity Entity() : { Token t;}
{
  t = < CLS_NAME >
  < OPEN_BRACKET >
  	 ( Property() )
  	 ( < SEPARATOR > Property() )*
  < CLOSE_BRACKET >{ jjtThis.setImage(t.image); return jjtThis;}

}

void Property() :{Token t1; Token t2; Token t3 = null;Token t4 = null;Token t5 =null;}
{
  t1 = < CLS_NAME >
  ( 
	t2 =  < PRIMITIVE > { jjtThis.setPrimitive(true);}
	|t2 =  < COLLECTION > <OPEN_ANGLE > t4 = < CLS_NAME > <CLOSE_ANGLE >  
	|t2 =  < CLS_NAME >
  )
  (
    < INDICATOR >
    (
       t3 = < CLS_NAME > | 	t5 = < MANY_MARKER > 
  	)
  )?
  {
	jjtThis.setName(t1.image);
	jjtThis.setType(t2.image);
	if (t3 != null ) {
	    jjtThis.setRelatedPropertyName(t3.image);
	}

	if (t5 != null ) {
	  	jjtThis.setMarkedWithStar(true);
	}

	if ( t5 != null && t4 == null ){
	    jjtThis.setUnidirManyToOne(true);
	}

	if ( t5 != null && t4 != null ) {
		jjtThis.setUnidirManyToMany(true);
	}
	  
    if (t4 != null ){
    	jjtThis.setCollectionType(t4.image);
   }
  }
}



  
